<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-21T05:33:53+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Domiki’s Computer Lecture Note</title><subtitle>Coding, coffee, picture, and starlight.</subtitle><author><name>Domiki</name></author><entry><title type="html">데이터 분석과 시각화</title><link href="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A43/" rel="alternate" type="text/html" title="데이터 분석과 시각화" /><published>2023-12-21T00:00:00+09:00</published><updated>2023-12-21T09:01:18+09:00</updated><id>http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A43</id><content type="html" xml:base="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A43/"><![CDATA[<h2 id="시각화와-그래프">시각화와 그래프</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">df.plot()</code>: 그래프 그리기</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">y='col</code>, <code class="language-plaintext highlighter-rouge">y=['col1', 'col2']</code>: 원하는 column만 그래프로 보기
        <ul>
          <li><code class="language-plaintext highlighter-rouge">df['col1'].plot()</code>, <code class="language-plaintext highlighter-rouge">df[['col1', 'col2']].plot()</code>과 동일</li>
          <li>pandas Series에도 <code class="language-plaintext highlighter-rouge">plot</code> 함수 사용 가능</li>
        </ul>
      </li>
      <li>
        <p>그래프 종류 설정 ⇒ <code class="language-plaintext highlighter-rouge">kind</code> 옵션 활용</p>

        <ol>
          <li>선 그래프(기본값): <code class="language-plaintext highlighter-rouge">kind='line'</code></li>
          <li>막대 그래프: <code class="language-plaintext highlighter-rouge">kind='bar'</code>
            <ul>
              <li>가로 막대 그래프: <code class="language-plaintext highlighter-rouge">kind='barh'</code></li>
              <li>쌓아올리기: <code class="language-plaintext highlighter-rouge">stacked=True</code></li>
              <li>x축: <code class="language-plaintext highlighter-rouge">x='col'</code></li>
            </ul>
          </li>
          <li>파이 그래프: <code class="language-plaintext highlighter-rouge">kind='pie'</code></li>
          <li>히스토그램: <code class="language-plaintext highlighter-rouge">kind='hist'</code>
            <ul>
              <li>y축: <code class="language-plaintext highlighter-rouge">y='col'</code></li>
              <li>n개로 분할: <code class="language-plaintext highlighter-rouge">bins=n</code></li>
            </ul>
          </li>
          <li>
            <p>박스 플롯: <code class="language-plaintext highlighter-rouge">kind='box'</code></p>

            <ul>
              <li>
                <p>다섯 개의 통계값으로 표현</p>

                <p><img src="/assets/images/데이터%20사이언스/img2.png" alt="박스 플롯" width="50%" height="50%" /></p>

                <ul>
                  <li>box: 25%(Q1) 지점부터 75%(Q3) 지점까지</li>
                  <li>whisker
                    <ul>
                      <li>Q1 지점부터 IQR(Interquartile Range, Q3 - Q1)의 1.5배 내에 있는 가장 멀리 떨어진 데이터 지점(또는 최솟값) 까지의 직선</li>
                      <li>Q3 지점부터 IQR의 1.5배 내에 있는 가장 멀리 떨어진 데이터 지점(또는 최댓값) 까지의 직선</li>
                    </ul>
                  </li>
                  <li>outlier(이상점): whisker의 범위를 넘어가는 점</li>
                </ul>
              </li>
              <li>
                <p>박스가 짧을수록 데이터가 균일, 길수록 데이터가 분산</p>
              </li>
            </ul>
          </li>
          <li>산점도(scatter plot): <code class="language-plaintext highlighter-rouge">kind='scatter'</code>
            <ul>
              <li>x축: <code class="language-plaintext highlighter-rouge">x='col1'</code></li>
              <li>y축: <code class="language-plaintext highlighter-rouge">y='col2'</code></li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<h2 id="seaborn-시각화">Seaborn 시각화</h2>

<ul>
  <li>Statistical Data Visualization ⇒ 통계를 기본으로 한 데이터 시각화</li>
</ul>

<ol>
  <li>PDF(PRobability Density Function): 확률 밀도 함수
    <ul>
      <li>데이터셋의 분포를 나타냄</li>
      <li>특정 구간의 확률은 그래프 아래 그 구간의 면적과 동일</li>
      <li>그래프 아래 모든 면적을 더하면 1</li>
    </ul>
  </li>
  <li>KDE Plot(Kernel Density Estimation)
    <ul>
      <li>불균일한 데이터를 부드러운 곡선으로 만들어 확률 밀도 함수 형태로 만듦 → 실제 데이터셋 분포와 다름</li>
      <li><code class="language-plaintext highlighter-rouge">sns.kdeplot(df['col'])</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">bw=x</code>: bandwidth. 추측의 정도 설정(클수록 곡선이 부드러워짐)</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">sns.distplot(df['col'], bins=n)</code>: KDE Plot + 히스토그램</li>
      <li><code class="language-plaintext highlighter-rouge">sns.violinplot(y=df['col'])</code>: violinplot
        <ul>
          <li>KDE Plot을 90도 돌린 형태</li>
          <li>Box Plot과는 다르게 violinplot은 분포 전체를 보여주는 특징이 있음</li>
          <li><code class="language-plaintext highlighter-rouge">hue='col'</code>: 카테고리별 색깔로 구분 가능</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">sns.kdeplot(df['col1'], df['col2'])</code>: 등고선도
        <ul>
          <li>산점도 + KDE Plot</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>LM Plot
    <ul>
      <li>산점도 + 회귀선(regression line)</li>
      <li><code class="language-plaintext highlighter-rouge">sns.lmplot(data=df, x='col1', y='col2')</code></li>
    </ul>
  </li>
  <li>카테고리별 시각화
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sns.catplot(data=df, x='col1', y='col2', kind='box', hue='col3')</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">x</code>: x축. 카테고리</li>
          <li><code class="language-plaintext highlighter-rouge">y</code>: y축. 분포값</li>
          <li><code class="language-plaintext highlighter-rouge">kind</code>: <code class="language-plaintext highlighter-rouge">box</code>, <code class="language-plaintext highlighter-rouge">violin</code>, <code class="language-plaintext highlighter-rouge">strip</code>(점 형식으로 표시. 데이터 수 확인 용이), <code class="language-plaintext highlighter-rouge">swarm</code>(<code class="language-plaintext highlighter-rouge">strip</code> 형식에서 점들이 펼쳐져서 보임)</li>
          <li><code class="language-plaintext highlighter-rouge">hue</code>: 같은 x값에서 카테고리별 색깔로 구분 가능</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="통계-기본-상식">통계 기본 상식</h2>

<ol>
  <li>평균(Mean)
    <ul>
      <li>데이터들의 합 / 데이터 개수</li>
      <li>잘못되거나 특이한 데이터에 대해서 취약</li>
    </ul>
  </li>
  <li>중간값(Median): 데이터셋에서 딱 중간에 있는 값
    <ul>
      <li>Q1: 중간값 포함 하위 데이터들 중에서 중간값. numpy/pandas에서는 $(\text{Length} - 1) \times 0.25$ 인덱스로 계산</li>
      <li>Q2: 중간값</li>
      <li>Q3: 중간값 포함 상위 데이터들 중에서 중간값. numpy/pandas에서는 $(\text{Length} - 1) \times 0.75$ 인덱스로 계산</li>
      <li><em>참고: 소수 인덱스는 두 정수 인덱스의 값 사이의 내분으로 계산</em></li>
    </ul>
  </li>
  <li>(피어슨) 상관 계수((Pearson) Correlation Coefficient)
    <ul>
      <li>-1 ~ 1 값 가짐</li>
      <li><code class="language-plaintext highlighter-rouge">df.corr()</code>: DataFrame에 존재하는 숫자 데이터 사이의 상관 계수를 보여줌</li>
      <li><code class="language-plaintext highlighter-rouge">sns.heatmap(df.corr())</code>: 상관계수 시각화
        <ul>
          <li>밝을수록 상관계수가 높음</li>
          <li><code class="language-plaintext highlighter-rouge">annot=True</code>: 숫자 표기</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="exploratory-data-analysiseda">Exploratory Data Analysis(EDA)</h2>

<ul>
  <li>탐색적 데이터 분석(EDA)
    <ul>
      <li>데이터셋을 다양한 관점에서 살펴보고 탐색하면서 인사이트를 찾는 것</li>
      <li>시각적인 방법, 통계적인 방법, …</li>
    </ul>
  </li>
  <li>
    <p>두 데이터의 연관성 확인 ⇒ <code class="language-plaintext highlighter-rouge">sns.jointplot(data=df, x='col1', y='col2')</code></p>

    <p><img src="/assets/images/데이터%20사이언스/img3.png" alt="jointplot" width="50%" height="50%" /></p>
  </li>
  <li>상관 관계 분석(Correlation Analysis) ⇒ <code class="language-plaintext highlighter-rouge">sns.heatmap</code> 활용</li>
  <li>
    <p>클러스터 분석(Cluster Analysis)</p>

    <ul>
      <li>데이터를 몇 가지 무리로 나누는 것</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">sns.clustermap(df)</code> 활용</p>

        <p><img src="/assets/images/데이터%20사이언스/img4.png" alt="clustermap" width="50%" height="50%" /></p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="새로운-인사이트-발견하기">새로운 인사이트 발견하기</h2>

<ol>
  <li>새로운 값 계산하기
    <ul>
      <li>모든 column의 합 구하기: <code class="language-plaintext highlighter-rouge">df.sum(axis='columns')</code></li>
    </ul>
  </li>
  <li>문자열 필터링
    <ul>
      <li>포함: <code class="language-plaintext highlighter-rouge">df['col'].str.contains('text')</code></li>
      <li>첫 시작: <code class="language-plaintext highlighter-rouge">df['col'].str.startswith('text')</code></li>
    </ul>
  </li>
  <li>문자열 분리: <code class="language-plaintext highlighter-rouge">df['col'].str.split()</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">n=1</code>: 첫 번째 띄어쓰기만 분리</li>
      <li><code class="language-plaintext highlighter-rouge">expand=True</code>: pandas DataFrame 형태로 출력</li>
      <li><code class="language-plaintext highlighter-rouge">pat='-'</code>: 분리 요소</li>
    </ul>
  </li>
  <li>
    <p>카테고리로 분류</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">map</code></p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mapping_dict</span> <span class="o">=</span> <span class="p">{</span>
 <span class="s">'A'</span><span class="p">:</span> <span class="s">'a'</span><span class="p">,</span>
 <span class="s">'B'</span><span class="p">:</span> <span class="s">'b'</span><span class="p">,</span>
 <span class="p">...</span>
<span class="p">}</span>

<span class="n">df</span><span class="p">[</span><span class="s">"col"</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="n">mapping_dict</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">groupby</code></p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">groups</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'col'</span><span class="p">)</span>
<span class="nb">type</span><span class="p">(</span><span class="n">groups</span><span class="p">)</span> <span class="c1"># DataFrameGroupBy
</span>
<span class="n">groups</span><span class="p">.</span><span class="n">count</span><span class="p">()</span>  <span class="c1"># 그룹별 개수
</span><span class="n">groups</span><span class="p">.</span><span class="nb">max</span><span class="p">()</span>    <span class="c1"># 그룹별 최댓값
</span><span class="n">groups</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>   <span class="c1"># 그룹별 평균값
</span><span class="n">groups</span><span class="p">.</span><span class="n">first</span><span class="p">()</span>  <span class="c1"># 그룹별 첫 번째 레코드
</span><span class="n">groups</span><span class="p">.</span><span class="n">last</span><span class="p">()</span>   <span class="c1"># 그룹별 마지막 레코드
</span>
<span class="n">groups</span><span class="p">.</span><span class="n">plot</span><span class="p">()</span>   <span class="c1"># 그룹별 그래프 그리기
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>데이터 합치기: <code class="language-plaintext highlighter-rouge">pd.merge(df1, df2, on='col')</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">on</code>: merge의 기준이 되는 축</li>
      <li><code class="language-plaintext highlighter-rouge">how</code>: merge 방법
        <ol>
          <li><code class="language-plaintext highlighter-rouge">inner</code>: inner join(교집합)(기본값)</li>
          <li><code class="language-plaintext highlighter-rouge">left</code>: left outer join(좌측 df 기준. 없으면 NaN)</li>
          <li><code class="language-plaintext highlighter-rouge">right</code>: right outer join(우측 df 기준. 없으면 NaN)</li>
          <li><code class="language-plaintext highlighter-rouge">outer</code>: full outer join(없으면 NaN)</li>
        </ol>
      </li>
    </ul>
  </li>
</ol>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Computer Science" /><category term="Data Science" /><summary type="html"><![CDATA[시각화와 그래프]]></summary></entry><entry><title type="html">데이터 만들기</title><link href="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A45/" rel="alternate" type="text/html" title="데이터 만들기" /><published>2023-12-21T00:00:00+09:00</published><updated>2023-12-21T14:19:00+09:00</updated><id>http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A45</id><content type="html" xml:base="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A45/"><![CDATA[<h2 id="데이터를-만드는-방법">데이터를 만드는 방법</h2>

<ol>
  <li>데이터 다운로드 받기
    <ol>
      <li><a href="https://data.seoul.go.kr">서울열린데이터광장</a></li>
      <li><a href="https://www.data.go.kr">공공데이터포털</a></li>
      <li><a href="http://www.index.go.kr">e-나라지표</a></li>
      <li><a href="http://kosis.kr">국가통계포털</a></li>
      <li><a href="https://bigdata.seoul.go.kr">서울특별시 빅데이터 캠퍼스</a></li>
      <li><a href="http://kostat.go.kr">통계청</a></li>
      <li><a href="https://toolbox.google.com/datasetsearch">구글 데이터 검색</a></li>
      <li><a href="https://www.kaggle.com/datasets">캐글</a></li>
      <li><a href="https://github.com/awesomedata/awesome-public-datasets">Awesome Public Datasets Github</a></li>
      <li><a href="https://dasl.datadescription.com">Data and Story Library</a></li>
      <li><a href="https://datahub.io">데이터허브</a></li>
    </ol>
  </li>
  <li>센서 사용하기: 아두이노, 라즈베리파이 등</li>
  <li>웹에서 모으기
    <ol>
      <li>웹 스크레이핑(Web Scraping): 하나의 특정 웹페이지에서 원하는 정보를 얻어오기</li>
      <li>웹 크롤링(Web Crawling): 여러 페이지에서 원하는 정보를 얻어오기</li>
    </ol>
  </li>
</ol>

<h2 id="웹-페이지-가져오기">웹 페이지 가져오기</h2>

<ul>
  <li>요청(request): 웹 클라이언트 → 웹 서버</li>
  <li>응답(response): 웹 서버 → 웹 클라이언트
    <ul>
      <li>HTML, CSS, JavaScript 파일</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="n">page</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"웹페이지 주소"</span><span class="p">)</span>
<span class="nb">type</span><span class="p">(</span><span class="n">page</span><span class="p">)</span> <span class="c1"># requests.models.Response
</span><span class="n">page</span><span class="p">.</span><span class="n">text</span> <span class="c1"># 응답 내용의 HTML 출력
</span></code></pre></div></div>

<ul>
  <li>웹사이트 주소 이해하기
    <ul>
      <li>https: 소통방식(http, https)</li>
      <li>www.example.com: 도메인 이름</li>
      <li>/catalog/news: 경로</li>
      <li>?sorting=price&amp;pageNumber=4: 쿼리 스트링(파라미터)</li>
      <li>#Debugging: 위치 지정</li>
    </ul>
  </li>
</ul>

<h2 id="필요한-데이터-골라내기">필요한 데이터 골라내기</h2>

<ul>
  <li>파싱(Parsing): 문자의 구조를 분석해서 원하는 정보를 얻어내는 것</li>
  <li>Beautiful Soup 툴 사용</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>

<span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">html_code</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
<span class="nb">type</span><span class="p">(</span><span class="n">soup</span><span class="p">)</span>  <span class="c1"># bs4.BeautifulSoup
</span>
<span class="n">li_tags</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'li'</span><span class="p">)</span> <span class="c1"># 모든 &lt;li&gt; 태그 선택하기
</span><span class="n">li_tags</span> <span class="c1"># bs4.element.ResultSet
</span>
<span class="n">li_tags</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1"># &lt;li&gt;커피&lt;/li&gt;
</span><span class="nb">type</span><span class="p">(</span><span class="n">li_tags</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1"># bs4.element.Tag
</span>
<span class="n">li_tags</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">text</span> <span class="c1"># '커피', 순수한 문자열 출력
</span>
<span class="n">img_tags</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'img'</span><span class="p">)</span> <span class="c1"># 모든 &lt;img&gt; 태그 선택하기
</span><span class="n">img_tags</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># &lt;img alt="coffee" src="https://i.imgur.com/bY010PC.jpg"/&gt;
</span><span class="n">img_tags</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">'src'</span><span class="p">]</span>  <span class="c1"># https://i.imgur.com/bY010PC.jpg"
</span></code></pre></div></div>

<ul>
  <li>CSS 선택자 정리
    <ol>
      <li>태그 이름
        <ul>
          <li><code class="language-plaintext highlighter-rouge">li</code>: 모든 <code class="language-plaintext highlighter-rouge">li</code>태그</li>
          <li><code class="language-plaintext highlighter-rouge">p</code>: 모든 <code class="language-plaintext highlighter-rouge">p</code>태그</li>
        </ul>
      </li>
      <li>아이디
        <ul>
          <li><code class="language-plaintext highlighter-rouge">#coffee</code>: 아이디가 <code class="language-plaintext highlighter-rouge">coffee</code>인 태그</li>
          <li><code class="language-plaintext highlighter-rouge">#tea_leaf</code>: 아이디가 <code class="language-plaintext highlighter-rouge">tea_leaf</code>인 태그</li>
        </ul>
      </li>
      <li>클래스
        <ul>
          <li><code class="language-plaintext highlighter-rouge">.favorite</code>: 클래스가 <code class="language-plaintext highlighter-rouge">favorite</code>인 태그</li>
          <li><code class="language-plaintext highlighter-rouge">.reverse</code>: 클래스가 <code class="language-plaintext highlighter-rouge">reverse</code>인 태그</li>
        </ul>
      </li>
      <li>속성
        <ul>
          <li><code class="language-plaintext highlighter-rouge">[alt="green-tea"]</code>: <code class="language-plaintext highlighter-rouge">alt</code> 속성의 값이 <code class="language-plaintext highlighter-rouge">"green-tea"</code>인 태그</li>
          <li><code class="language-plaintext highlighter-rouge">[href="https://www.example.com"]</code>: <code class="language-plaintext highlighter-rouge">href</code> 속성의 값이 <code class="language-plaintext highlighter-rouge">"https://www.example.com"</code>인 태그</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>CSS 선택자 조합해서 사용하기
    <ol>
      <li>OR 연산
        <ul>
          <li><code class="language-plaintext highlighter-rouge">#login, .left</code>: 아이디가 <code class="language-plaintext highlighter-rouge">login</code>이거나 클래스가 <code class="language-plaintext highlighter-rouge">left</code>인 태그</li>
          <li><code class="language-plaintext highlighter-rouge">p, i</code>: 모든 <code class="language-plaintext highlighter-rouge">p</code>태그와 모든 <code class="language-plaintext highlighter-rouge">i</code>태그</li>
        </ul>
      </li>
      <li>AND 연산
        <ul>
          <li><code class="language-plaintext highlighter-rouge">.favorite.private</code>: <code class="language-plaintext highlighter-rouge">favorite</code> 클래스와 <code class="language-plaintext highlighter-rouge">private</code> 클래스를 모두 가진 태그</li>
          <li><code class="language-plaintext highlighter-rouge">p.favorite</code>: <code class="language-plaintext highlighter-rouge">favorite</code> 클래스를 가진 <code class="language-plaintext highlighter-rouge">p</code>태그</li>
        </ul>
      </li>
      <li>중첩된 요소
        <ul>
          <li><code class="language-plaintext highlighter-rouge">.favorite .private</code>: <code class="language-plaintext highlighter-rouge">favorite</code> 클래스를 가진 태그에 중첩된, <code class="language-plaintext highlighter-rouge">private</code> 클래스를 가진 태그</li>
          <li><code class="language-plaintext highlighter-rouge">p .favorite</code>: <code class="language-plaintext highlighter-rouge">p</code>태그 아래에 중첩된, <code class="language-plaintext highlighter-rouge">favorite</code> 클래스를 가진 태그</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>크롬 개발자 도구로 선택자 알아내기
    <ul>
      <li>알고 싶은 요소 선택 → Inspect(검사) 클릭</li>
    </ul>
  </li>
  <li>
    <p>크롤링 악용하는 나쁜 봇(bot) 차단 기법으로부터 해결 방안</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">time.sleep(3)</code></li>
      <li>
        <p>user-agent(사용자 대표하여 여러 가지 작업을 해 주는 프로그램, <a href="https://developer.mozilla.org/ko/docs/Glossary/User_agent">참고링크</a>) 헤더 추가</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'user-agent'</span><span class="p">:</span> <span class="s">'Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36'</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Computer Science" /><category term="Data Science" /><summary type="html"><![CDATA[데이터를 만드는 방법]]></summary></entry><entry><title type="html">데이터 퀄리티 높이기</title><link href="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A44/" rel="alternate" type="text/html" title="데이터 퀄리티 높이기" /><published>2023-12-21T00:00:00+09:00</published><updated>2023-12-21T13:28:00+09:00</updated><id>http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A44</id><content type="html" xml:base="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A44/"><![CDATA[<h2 id="좋은-데이터의-기준">좋은 데이터의 기준</h2>

<ol>
  <li>완결성(Completeness): 필수적인 데이터는 모두 기록되어 있어야 함
    <ul>
      <li>결측값(채워져야 하는데 비어 있는 값, NaN(Not a Number))이 없어야 함</li>
    </ul>
  </li>
  <li>유일성(Uniqueness): 동일한 데이터가 불필요하게 중복되어 있으면 안 됨
    <ul>
      <li>예&gt; 가입기록 ⇒ 이메일 인증, 휴대폰 번호 본인 확인, 주민등록번호 본인 확인</li>
    </ul>
  </li>
  <li>통일성(Conformity): 데이터가 동일한 형식으로 저장되어 있어야 함
    <ul>
      <li>표기법, 포멧 등</li>
    </ul>
  </li>
  <li>정확성(Accuracy): 데이터가 정확해야 함
    <ul>
      <li>이상점(Outlier)이 있으면 올바르게 측정된 값인지 확인 + 이상점 처리</li>
    </ul>
  </li>
</ol>

<h2 id="데이터-클리닝">데이터 클리닝</h2>

<ol>
  <li>
    <p>완결성</p>

    <ul>
      <li>결측값: 없는 것이 제일 좋음. 자주 발생한다면 원인 파악 필요</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="p">.</span><span class="n">isnull</span><span class="p">()</span>  <span class="c1"># 각 셀마다 비어있는 값 표시
</span><span class="n">df</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span>  <span class="c1"># 각 열마다 비어있는 값 개수 표시
</span>
<span class="n">df</span><span class="p">.</span><span class="n">dropna</span><span class="p">()</span>  <span class="c1"># NaN 있는 행 제거
</span><span class="n">df</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'columns'</span><span class="p">)</span>  <span class="c1"># NaN 있는 열 제거
</span>
<span class="n">df</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># NaN 있는 셀 0으로 채우기
</span><span class="n">df</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">mean</span><span class="p">())</span> <span class="c1"># NaN 있는 셀 평균으로 채우기
</span><span class="n">df</span><span class="p">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">median</span><span class="p">())</span> <span class="c1"># NaN 있는 셀 중간값으로 채우기
</span>
<span class="s">''' inplace=True # 데이터 유지 '''</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>유일성</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="p">.</span><span class="n">drop_duplicates</span><span class="p">()</span>  <span class="c1"># 중복되는 행 제거
</span><span class="n">df</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">drop_duplicates</span><span class="p">().</span><span class="n">T</span>  <span class="c1"># 중복되는 열 제거, 계속 사용하려면 변수로 저장해야 함
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>정확성</p>

    <ul>
      <li>이상점(Outlier): 다른 값들과 너무 동떨어져 있는 데이터. 어쩌면 부정확한 데이터</li>
      <li>이상점 판단 기준: Q3로부터 1.5×IQR 이상, Q1으로부터 1.5×IQR 이하</li>
      <li>이상점이 제대로 된 데이터라면, 분석에 방해가 되면 제거하고 의미 있는 정보라면 둔다.</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">q1</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">'col'</span><span class="p">].</span><span class="n">quantile</span><span class="p">(</span><span class="mf">0.25</span><span class="p">)</span>
<span class="n">q3</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">'col'</span><span class="p">].</span><span class="n">quantile</span><span class="p">(</span><span class="mf">0.75</span><span class="p">)</span>
<span class="n">iqr</span> <span class="o">=</span> <span class="n">q3</span> <span class="o">-</span> <span class="n">q1</span>

<span class="n">condition</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'col'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">q1</span> <span class="o">-</span> <span class="mf">1.5</span> <span class="o">*</span> <span class="n">iqr</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'col'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">q3</span> <span class="o">+</span> <span class="mf">1.5</span> <span class="o">*</span> <span class="n">iqr</span><span class="p">)</span>
<span class="n">df</span><span class="p">[</span><span class="n">condition</span><span class="p">]</span> <span class="c1"># outlier 표시
</span>
<span class="c1"># outlier 제거
</span><span class="n">df</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">condition</span><span class="p">].</span><span class="n">index</span><span class="p">)</span>
</code></pre></div>    </div>

    <ul>
      <li>관계적 이상점(Relational Outlier)
        <ul>
          <li>두 변수의 관계를 고려했을 때 이상한 데이터</li>
          <li><code class="language-plaintext highlighter-rouge">df.corr()</code> 또는 산점도(<code class="language-plaintext highlighter-rouge">df.plot(kind='scatter', x='col1', y='col2')</code>)를 이용하여 분석 및 처리 가능</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Computer Science" /><category term="Data Science" /><summary type="html"><![CDATA[좋은 데이터의 기준]]></summary></entry><entry><title type="html">DataFrame 다루기</title><link href="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A42/" rel="alternate" type="text/html" title="DataFrame 다루기" /><published>2023-12-20T00:00:00+09:00</published><updated>2023-12-21T03:20:00+09:00</updated><id>http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A42</id><content type="html" xml:base="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A42/"><![CDATA[<h2 id="dataframe-인덱싱">DataFrame 인덱싱</h2>

<ul>
  <li>인덱싱 결과 한 줄인 경우의 type ⇒ <code class="language-plaintext highlighter-rouge">pandas.Series</code></li>
  <li>인덱싱 결과 여러 줄인 경우의 type ⇒ <code class="language-plaintext highlighter-rouge">pandas.DataFrame</code></li>
</ul>

<h3 id="한-값만-가져오기">한 값만 가져오기</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">df.loc["row", "col"]</code></li>
</ul>

<h3 id="이름으로-인덱싱하기">이름으로 인덱싱하기</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">기본 형태</th>
      <th style="text-align: center">단축 형태</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">하나의 row 이름</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.loc["row"]</code><br /><code class="language-plaintext highlighter-rouge">df.loc["row", :]</code></td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">row 이름의 리스트</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.loc[["row1", "row2", "row3"]]</code><br /><code class="language-plaintext highlighter-rouge">df.loc[["row1", "row2", "row3"], :]</code></td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">row 이름의 리스트 슬라이싱</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.loc["row1":"row2"]</code><br /><code class="language-plaintext highlighter-rouge">df.loc["row1":"row2", :]</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df["row1":"row2"]</code></td>
    </tr>
    <tr>
      <td style="text-align: center">하나의 column 이름</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.loc[:, "col1"]</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df["col"]</code></td>
    </tr>
    <tr>
      <td style="text-align: center">column 이름의 리스트</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.loc[:, ["col1", "col2", "col3"]]</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df[["col1", "col2", "col3"]]</code></td>
    </tr>
    <tr>
      <td style="text-align: center">column 이름의 리스트 슬라이싱</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.loc[:, "col1":"col2"]</code></td>
      <td style="text-align: center"> </td>
    </tr>
  </tbody>
</table>

<h3 id="위치로-인덱싱하기">위치로 인덱싱하기</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">기본 형태</th>
      <th style="text-align: center">단축 형태</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">하나의 row 위치</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.iloc[1]</code><br /><code class="language-plaintext highlighter-rouge">df.iloc[1, :]</code></td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">row 위치의 리스트</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.iloc[[1, 2, 3]]</code><br /><code class="language-plaintext highlighter-rouge">df.iloc[[1, 2, 3], :]</code></td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">row 위치의 리스트 슬라이싱</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.iloc[1:3]</code><br /><code class="language-plaintext highlighter-rouge">df.iloc[1:3, :]</code></td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">하나의 column 위치</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.iloc[:, 1]</code></td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">column 위치의 리스트</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.iloc[:, [1, 2, 3]]</code></td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">column 위치의 리스트 슬라이싱</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">df.iloc[:, 1:3]</code></td>
      <td style="text-align: center"> </td>
    </tr>
  </tbody>
</table>

<h3 id="boolean으로-인덱싱하기">boolean으로 인덱싱하기</h3>

<ul>
  <li>numpy 불린 연산처럼 계산 가능</li>
  <li>조건: <code class="language-plaintext highlighter-rouge">df["col"] &gt; 2</code> ⇒ <code class="language-plaintext highlighter-rouge">pandas.Series [False, True, False, True, ...]</code></li>
  <li>조건 활용: <code class="language-plaintext highlighter-rouge">df.loc[df["col"] &gt; 2]</code> ⇒ <code class="language-plaintext highlighter-rouge">pandas.DataFrame</code> 조건에 맞는 record만 나옴</li>
  <li>다중조건: <code class="language-plaintext highlighter-rouge">(condition1) &amp; (condition2)</code> // <code class="language-plaintext highlighter-rouge">(condition1) | (condition2)</code></li>
  <li>dataframe dtype으로도 불린 연산 가능</li>
</ul>

<h2 id="데이터-변형하기">데이터 변형하기</h2>

<h3 id="값-수정">값 수정</h3>

<ul>
  <li>인덱싱과 동일하게 접근 후 할당 연산자로 대입
    <ol>
      <li>하나의 위치
        <ul>
          <li><code class="language-plaintext highlighter-rouge">df.loc["row", "col"] = "data"</code></li>
        </ul>
      </li>
      <li>하나의 row 또는 col
        <ol>
          <li>같은 데이터 삽입 ⇒ 단일 데이터 (ex&gt; <code class="language-plaintext highlighter-rouge">df.loc["row"] = "data"</code>)</li>
          <li>각각 데이터 삽입 ⇒ 리스트 (ex&gt; <code class="language-plaintext highlighter-rouge">df.loc["row"] = ["data1", "data2", ... , "dataN"]</code>)</li>
        </ol>
      </li>
      <li>여러 개의 row 또는 col
        <ol>
          <li>같은 데이터 삽입 ⇒ 단일 데이터 (ex&gt; <code class="language-plaintext highlighter-rouge">df[["col1", "col2"]] = "data"</code>)</li>
          <li>각각의 row 또는 col에 같은 데이터 삽입 ⇒ 1차원 리스트 (ex&gt; <code class="language-plaintext highlighter-rouge">df[["col1", "col2"]] = ["data1", "data2"]</code>)</li>
          <li>전부 다른 데이터 삽입 ⇒ 2차원 리스트 (ex&gt; <code class="language-plaintext highlighter-rouge">df[["col1", "col2"]] = [["data11", ... , "data1N"], ["data21", ... ,"data2N"]]</code>)</li>
        </ol>
      </li>
      <li>여러 위치
        <ul>
          <li>3과 동일 (ex&gt; <code class="language-plaintext highlighter-rouge">df.iloc[[2, 4], [1, 3]] = "data"</code>)</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>조건의 인덱싱: <code class="language-plaintext highlighter-rouge">df.loc[(condition)] = "data"</code></li>
</ul>

<h3 id="값-추가">값 추가</h3>

<ol>
  <li>하나의 row 또는 col
    <ol>
      <li>같은 데이터 삽입 ⇒ 단일 데이터 (ex&gt; <code class="language-plaintext highlighter-rouge">df.loc["new row"] = "data"</code>)</li>
      <li>각각 데이터 삽입 ⇒ 리스트 (ex&gt; <code class="language-plaintext highlighter-rouge">df.loc["new row"] = ["data1", "data2", ... , "dataN"]</code>)</li>
    </ol>
  </li>
</ol>

<h3 id="값-삭제">값 삭제</h3>

<ol>
  <li>row 삭제
    <ol>
      <li>하나의 row: <code class="language-plaintext highlighter-rouge">df.drop("row", axis='index')</code></li>
      <li>여러 개의 row: <code class="language-plaintext highlighter-rouge">df.drop(["row1", "row2", ...], axis='index)</code></li>
    </ol>
  </li>
  <li>col 삭제
    <ol>
      <li>하나의 col: <code class="language-plaintext highlighter-rouge">df.drop("col", axis='columns')</code></li>
      <li>여러 개의 col: <code class="language-plaintext highlighter-rouge">df.drop(["col1", "col2", ...], axis='columns)</code></li>
    </ol>
  </li>
</ol>

<ul>
  <li><code class="language-plaintext highlighter-rouge">inplace</code> 옵션
    <ul>
      <li><code class="language-plaintext highlighter-rouge">inplace=True</code>: 기존의 df는 수정하지 않음(고쳐진 df를 리턴)</li>
      <li><code class="language-plaintext highlighter-rouge">inplace=False</code>: 기존의 df를 수정(리턴 X)</li>
    </ul>
  </li>
</ul>

<h3 id="indexcolumn-수정">index/column 수정</h3>

<ol>
  <li>column 변경
    <ol>
      <li>하나 변경: <code class="language-plaintext highlighter-rouge">df.rename(columns={"oldname": "newname"})</code>(+<code class="language-plaintext highlighter-rouge">inplace</code>)</li>
      <li>여러 개 변경: <code class="language-plaintext highlighter-rouge">df.rename(columns={"oldname1": "newname1", "oldname2": "newname2", ...})</code>(+<code class="language-plaintext highlighter-rouge">inplace</code>)</li>
    </ol>
  </li>
  <li>index 변경
    <ul>
      <li>이름만 변경: <code class="language-plaintext highlighter-rouge">df.index.name = "name"</code></li>
      <li>index column 변경: <code class="language-plaintext highlighter-rouge">df.set_index("col")</code>(+<code class="language-plaintext highlighter-rouge">inplace</code>)
        <ul>
          <li>기존의 index가 사라지기 때문에 기존의 index를 새로운 column으로 지정을 먼저 해줘야 한다(<code class="language-plaintext highlighter-rouge">df["new col"] = df.index</code>)</li>
          <li>index는 각 record별 데이터가 겹치지 않는 column으로 선정하는 것이 좋다</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="큰-데이터-다루기">큰 데이터 다루기</h2>

<h3 id="dataframe-다루기">DataFrame 다루기</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">df.head(n)</code>: 상위 n개의 record만 출력</li>
  <li><code class="language-plaintext highlighter-rouge">df.tail(n)</code>: 하위 n개의 record만 출력</li>
  <li><code class="language-plaintext highlighter-rouge">df.shape</code>: dataframe의 모양을 tuple로 출력</li>
  <li><code class="language-plaintext highlighter-rouge">df.columns</code>: dataframe의 header를 pandas Index로 출력</li>
  <li><code class="language-plaintext highlighter-rouge">df.info()</code>: dataframe의 정보 출력</li>
  <li><code class="language-plaintext highlighter-rouge">df.describe()</code>: dataframe의 통계를 pandas DataFrame으로 출력</li>
  <li><code class="language-plaintext highlighter-rouge">df.sort_values(by="col")</code>: 특정 column에 대한 정렬 출력
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ascending=False</code>: 내림차순</li>
      <li><code class="language-plaintext highlighter-rouge">inplace=True</code>: 기존 dataframe을 변경</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">df.sort_index()</code>: index에 대한 정렬 출력
    <ul>
      <li>옵션은 <code class="language-plaintext highlighter-rouge">sort_values</code>와 동일</li>
    </ul>
  </li>
</ul>

<h3 id="series-다루기">Series 다루기</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">df["col"].unique()</code>: series에 존재하는 각 종류를 numpy array로 출력</li>
  <li><code class="language-plaintext highlighter-rouge">df["col"].value_counts()</code>: series에 존재하는 종류 각각의 등장 갯수를 pandas Series로 출력</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">df["col"].describe()</code>: series의 통계를 pandas Series로 출력</p>
  </li>
  <li>활용
    <ul>
      <li><code class="language-plaintext highlighter-rouge">series[(condition)]</code>: 하나의 pandas Series에서 조건에 맞는 record를 pandas Series로 출력(조건 인덱싱과 동일)
        <ul>
          <li>예시
            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">series</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"value1"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">series</span><span class="p">[</span><span class="n">series</span> <span class="o">==</span> <span class="mi">2</span><span class="p">])</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Computer Science" /><category term="Data Science" /><summary type="html"><![CDATA[DataFrame 인덱싱]]></summary></entry><entry><title type="html">데이터 사이언스 기본</title><link href="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A41/" rel="alternate" type="text/html" title="데이터 사이언스 기본" /><published>2023-12-18T00:00:00+09:00</published><updated>2023-12-18T09:43:00+09:00</updated><id>http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A41</id><content type="html" xml:base="http://localhost:4000/coding/computer%20science/data%20science/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A41/"><![CDATA[<h2 id="데이터-사이언스란">데이터 사이언스란?</h2>

<ul>
  <li>데이터 사이언스: 데이터를 다루는 일</li>
  <li>데이터가 많다 → 할 수 있는 일이 많다</li>
  <li>데이터 사이언스 프로세스
    <ol>
      <li>문제 정의하기: 해결하고자 하는 문제를 정의
        <ul>
          <li>목표 설정: 기간 설정, 평가 방법 설정, 필요한 데이터 설정</li>
        </ul>
      </li>
      <li>데이터 모으기: 필요한 데이터를 모을 수 있는 방법 찾기
        <ul>
          <li>웹 크롤링, 자료 모으기, 파일 읽고 쓰기</li>
        </ul>
      </li>
      <li>데이터 다듬기: 데이터의 퀄리티를 높여서 의미 있는 분석이 가능하게끔
        <ul>
          <li>데이터 관찰하기, 데이터 오류 제거, 데이터 정리하기</li>
        </ul>
      </li>
      <li>데이터 분석하기: 준비된 데이터로부터 의미를 찾기
        <ul>
          <li>데이터 파악하기, 데이터 변형하기, 통계 분석, 인사이트 발견, 의미 도출</li>
        </ul>
      </li>
      <li>데이터 시각화 및 커뮤니케이션: 분석 결과를 다른 사람에게 전달
        <ul>
          <li>다양한 시각화, 커뮤니케이션, 리포트</li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<h2 id="jupyter-notebook-cheatsheet">Jupyter Notebook Cheatsheet</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Enter</code>: Edit mode</li>
  <li><code class="language-plaintext highlighter-rouge">Esc</code>: Command mode</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl + Enter</code>: 실행</li>
  <li><code class="language-plaintext highlighter-rouge">A</code>: 현재 cell의 위쪽에 cell 추가</li>
  <li><code class="language-plaintext highlighter-rouge">B</code>: 현재 cell의 아래쪽에 cell 추가</li>
  <li><code class="language-plaintext highlighter-rouge">D D</code>: 현재 cell 삭제</li>
  <li><code class="language-plaintext highlighter-rouge">Alt + Enter</code>, <code class="language-plaintext highlighter-rouge">Opt + Enter</code>: 실행 후 다음 cell 생성</li>
  <li><code class="language-plaintext highlighter-rouge">Shift + Enter</code>: 실행 후 다음 cell 이동(마지막 cell에서는 생성)</li>
  <li>Markdown
    <ul>
      <li><code class="language-plaintext highlighter-rouge">#</code>: 가장 큰 제목</li>
      <li><code class="language-plaintext highlighter-rouge">##</code>: 두 번째 큰 제목</li>
      <li><code class="language-plaintext highlighter-rouge">###</code>: 세 번째 큰 제목</li>
      <li><code class="language-plaintext highlighter-rouge">####</code>: 네 번째 큰 제목</li>
      <li><code class="language-plaintext highlighter-rouge">**text**</code>, <code class="language-plaintext highlighter-rouge">__text__</code>: 볼드체</li>
      <li><code class="language-plaintext highlighter-rouge">*text*</code>, <code class="language-plaintext highlighter-rouge">_text_</code>: 이텔릭체</li>
      <li><code class="language-plaintext highlighter-rouge">**_text_**</code>, <code class="language-plaintext highlighter-rouge">*__text__*</code> 등: 볼드 이텔릭체</li>
      <li><code class="language-plaintext highlighter-rouge">~~text~~</code>: 취소선</li>
      <li><code class="language-plaintext highlighter-rouge">* list item 1</code>: 번호가 없는 리스트</li>
      <li><code class="language-plaintext highlighter-rouge">1. list item 1</code>: 번호가 있는 리스트</li>
      <li>문장 끝에 <code class="language-plaintext highlighter-rouge">Space</code> 키 2번 누르고 줄바꿈: 줄바꿈</li>
      <li><code class="language-plaintext highlighter-rouge">Enter</code> 키 2번: 문단 바꿈</li>
      <li><code class="language-plaintext highlighter-rouge">[text](address)</code>: 링크</li>
      <li><code class="language-plaintext highlighter-rouge">![text](image address)</code>: 이미지</li>
      <li>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```language
  // code
```
</code></pre></div>        </div>
        <p>: 코드 블록(언어 지정 가능)</p>
      </li>
      <li><code class="language-plaintext highlighter-rouge">`inline code`</code>: 인라인 코드</li>
      <li><code class="language-plaintext highlighter-rouge">---</code>: 구분선</li>
    </ul>
  </li>
</ul>

<h2 id="numpy">Numpy</h2>

<ul>
  <li>numerical python</li>
  <li>
    <p>numpy array</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span>

<span class="n">array1</span> <span class="o">=</span> <span class="n">numpy</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">])</span> <span class="c1"># 배열 생성
</span><span class="nb">type</span><span class="p">(</span><span class="n">array1</span><span class="p">)</span> <span class="c1"># numpy.ndarray(n-dimentional array)
</span><span class="k">print</span><span class="p">(</span><span class="n">array1</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span> <span class="c1"># array의 차원 출력(3, 4) -&gt; 3행 4열
</span><span class="k">print</span><span class="p">(</span><span class="n">array1</span><span class="p">.</span><span class="n">size</span><span class="p">)</span> <span class="c1"># array의 요소 개수(12 &lt;- 3 * 4)
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="array-생성하는-법">array 생성하는 법</h3>

<ol>
  <li><code class="language-plaintext highlighter-rouge">numpy.array(list)</code></li>
  <li><code class="language-plaintext highlighter-rouge">numpy.full(n, m)</code>: m이 n개인 array 생성</li>
  <li><code class="language-plaintext highlighter-rouge">numpy.zeros(m, dtype = int)</code>: 0이 m개인 array 생성</li>
  <li><code class="language-plaintext highlighter-rouge">numpy.ones(m, dtype = int)</code>: 1이 m개인 array 생성</li>
  <li><code class="language-plaintext highlighter-rouge">numpy.random.random(m)</code>: 0부터 1까지 랜덤한 m개의 array 생성</li>
  <li><code class="language-plaintext highlighter-rouge">numpy.arange</code>
    <ol>
      <li><code class="language-plaintext highlighter-rouge">numpy.arange(m)</code>: 0부터 m-1까지 값들이 담긴 array 생성</li>
      <li><code class="language-plaintext highlighter-rouge">numpy.arange(n, m)</code>: n부터 m-1까지 값들이 담긴 array 생성</li>
      <li><code class="language-plaintext highlighter-rouge">numpy.arange(n, m, s)</code>: n부터 m-1까지의 값들 중 간격이 s인 array 생성</li>
    </ol>
  </li>
</ol>

<h3 id="인덱싱-슬라이싱">인덱싱, 슬라이싱</h3>

<ul>
  <li>인덱싱
    <ul>
      <li><code class="language-plaintext highlighter-rouge">array[m]</code>: m이 음수면 뒤에서부터</li>
      <li><code class="language-plaintext highlighter-rouge">array[list]</code>, <code class="language-plaintext highlighter-rouge">array[np.array]</code>: list, array의 번호에 해당하는 것들을 array로 추출</li>
    </ul>
  </li>
  <li>슬라이싱
    <ul>
      <li><code class="language-plaintext highlighter-rouge">array[m:n]</code>, <code class="language-plaintext highlighter-rouge">array[:n]</code>, <code class="language-plaintext highlighter-rouge">array[m:]</code></li>
      <li><code class="language-plaintext highlighter-rouge">array[m:n:s]</code></li>
    </ul>
  </li>
</ul>

<h3 id="numpy-연산">numpy 연산</h3>

<ul>
  <li>numpy 기본 연산: 단순 사칙연산 기호들로 연산 가능</li>
  <li>
    <p>numpy 불린 연산</p>

    <ul>
      <li>array에 조건을 걸면 각 요소별 boolean의 값을 np.array로 return</li>
      <li><code class="language-plaintext highlighter-rouge">np.where(booleans array)</code>: boolean이 담긴 np.array를 대입하면 True인 index를 array로 출력</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">array1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">31</span><span class="p">])</span>

<span class="s">''' numpy 불린 연산 '''</span>
<span class="n">array1</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="c1"># array([False, False, True, True, True, True, True, True, True, True, True])
</span>
<span class="s">''' np.where 사용법 '''</span>
<span class="n">booleans</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">])</span>
<span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">booleans</span><span class="p">)</span> <span class="c1"># array([0, 1, 3, 5, 6, 7, 9])
</span>
<span class="s">''' np.where 응용 '''</span>
<span class="nb">filter</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">array1</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">)</span>
<span class="n">array1</span><span class="p">[</span><span class="nb">filter</span><span class="p">]</span> <span class="c1"># array([5, 7, 11, 13, 17, 19, 23, 29, 31])
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="numpy-array와-python-array의-차이점">numpy array와 python array의 차이점</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">numpy array</th>
      <th style="text-align: center">python array</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">합산시 index끼리 연산</td>
      <td style="text-align: center">합산시 두 array가 합쳐짐</td>
    </tr>
    <tr>
      <td style="text-align: center">뺄셈, 나눗셈, 곱셈, 스칼라덧셈 가능</td>
      <td style="text-align: center">불가능</td>
    </tr>
    <tr>
      <td style="text-align: center">스칼라곱셈시 index끼리 연산</td>
      <td style="text-align: center">스칼라곱셈시 array가 배수만큼 곱해짐</td>
    </tr>
    <tr>
      <td style="text-align: center">하나의 type만으로 요소 가능</td>
      <td style="text-align: center">여러 type으로 요소 가능</td>
    </tr>
    <tr>
      <td style="text-align: center">속도 빠름</td>
      <td style="text-align: center">상대적으로 느림</td>
    </tr>
    <tr>
      <td style="text-align: center">수치 계산이 많고 복잡할 때<br />행렬같은 다차원 배열일 경우</td>
      <td style="text-align: center">값을 추가하고 제거하는 일</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">''' numpy array와 list array의 속도 차이 비교 '''</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">timeit</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="mi">10000000</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10000000</span><span class="p">))</span>

<span class="n">timeit</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="p">[</span><span class="n">n</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">y</span><span class="p">],</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">timeit</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1"># numpy array: 약 0.0초
# list array: 약 7.0초
</span></code></pre></div></div>

<h3 id="numpy-기본-통계">numpy 기본 통계</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">array.max()</code>, <code class="language-plaintext highlighter-rouge">array.min()</code>: 최댓값, 최솟값</li>
  <li><code class="language-plaintext highlighter-rouge">array.mean()</code>: 평균값</li>
  <li><code class="language-plaintext highlighter-rouge">array.median()</code>: 중간값</li>
  <li><code class="language-plaintext highlighter-rouge">array.std()</code>, <code class="language-plaintext highlighter-rouge">array.var()</code>: 표준 편차, 분산</li>
</ul>

<h2 id="pandas">Pandas</h2>

<ul>
  <li>DataFrame: 표 형식의 데이터를 담는 자료형
    <ul>
      <li>가로: 열(column). 데이터의 특징</li>
      <li>세로: 행(row, index). 레코드</li>
    </ul>
  </li>
  <li>
    <p>numpy와의 차이점</p>

    <p><img src="/assets/images/데이터%20사이언스/img1.png" alt="pandas와 numpy의 차이점" width="50%" height="50%" /></p>

    <ol>
      <li>각 column가 row에 이름을 붙일 수 있음</li>
      <li>다른 자료형도 담을 수 있음</li>
    </ol>
  </li>
</ul>

<h3 id="dataframe-사용해-보기">DataFrame 사용해 보기</h3>

<ol>
  <li>
    <p>기본 생성<br />
<code class="language-plaintext highlighter-rouge">pd.DataFrame(2d_list)</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="s">''' conlumns, index 생성 '''</span>
<span class="n">two_dimensional_list</span> <span class="o">=</span> <span class="p">[[</span><span class="s">'name1'</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">84</span><span class="p">],</span> <span class="p">[</span><span class="s">'name2'</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">74</span><span class="p">],</span> <span class="p">[</span><span class="s">'name3'</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">24</span><span class="p">],</span> <span class="p">[</span><span class="s">'name4'</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">34</span><span class="p">]]</span>

<span class="n">my_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">tow_dimensional_list</span><span class="p">)</span>

<span class="nb">type</span><span class="p">(</span><span class="n">my_df</span><span class="p">)</span> <span class="c1"># pandas.core.frame.DataFrame
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>columns, index 생성<br />
<code class="language-plaintext highlighter-rouge">pd.DataFrame(2d_list, columns = list, index = list)</code>
<code class="language-plaintext highlighter-rouge">dataframe.columns</code>: dataframe의 열 제목 출력
<code class="language-plaintext highlighter-rouge">dataframe.index</code>: dataframe의 행 제목 출력
<code class="language-plaintext highlighter-rouge">dataframe.dtypes</code>: dataframe의 각 열별 type 출력</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="s">''' conlumns, index 생성 '''</span>
<span class="n">two_dimensional_list</span> <span class="o">=</span> <span class="p">[[</span><span class="s">'name1'</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">84</span><span class="p">],</span> <span class="p">[</span><span class="s">'name2'</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">74</span><span class="p">],</span> <span class="p">[</span><span class="s">'name3'</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">24</span><span class="p">],</span> <span class="p">[</span><span class="s">'name4'</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">34</span><span class="p">]]</span>

<span class="n">my_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">tow_dimensional_list</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'name'</span><span class="p">,</span> <span class="s">'values1'</span><span class="p">,</span> <span class="s">'values2'</span><span class="p">],</span> <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>

<span class="n">my_df</span><span class="p">.</span><span class="n">columns</span>  <span class="c1"># Index(['name', 'values1', 'values2'], dtype='object')
</span><span class="n">my_df</span><span class="p">.</span><span class="n">index</span>    <span class="c1"># Index(['a', 'b', 'c', 'd'], dtype='object')
</span>
<span class="n">my_df</span><span class="p">.</span><span class="n">dtypes</span>
<span class="s">'''
name     object  # 문자열
values1  int64   # 64비트 정수
values2  int64
'''</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="dataframe을-만드는-다양한-방법">DataFrame을 만드는 다양한 방법</h3>

<ol>
  <li>
    <p>list, numpy array ⇒ From list of lists, array of arrays, list of series</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="c1"># from list of lists(2차원 리스트)
</span><span class="n">two_dimensional_list</span> <span class="o">=</span> <span class="p">[[</span><span class="s">'name1'</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">84</span><span class="p">],</span> <span class="p">[</span><span class="s">'name2'</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">74</span><span class="p">],</span> <span class="p">[</span><span class="s">'name3'</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">24</span><span class="p">],</span> <span class="p">[</span><span class="s">'name4'</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">34</span><span class="p">]]</span>

<span class="c1"># from array of arrays(2차원 numpy array)
</span><span class="n">tow_dimensional_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">two_dimensional_list</span><span class="p">)</span>

<span class="c1"># list of series(pandas Series를 담고 있는 리스트)
</span><span class="n">list_of_series</span> <span class="o">=</span> <span class="p">[</span>
  <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">([</span><span class="s">'name1'</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">84</span><span class="p">]),</span>
  <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">([</span><span class="s">'name2'</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">74</span><span class="p">]),</span>
  <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">([</span><span class="s">'name3'</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">24</span><span class="p">]),</span>
  <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">([</span><span class="s">'name4'</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">34</span><span class="p">])</span>
<span class="p">]</span>

<span class="c1"># 아래 셋은 모두 동일
</span><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">two_dimensional_list</span><span class="p">)</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">two_dimensional_array</span><span class="p">)</span>
<span class="n">df3</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">list_of_series</span><span class="p">)</span>

<span class="s">'''
        0    1    2
0   name1   46   84
1   name2   52   74
2   name3   64   24
3   name4   88   34
'''</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>dict ⇒ Fromdict of lists, dict of ararys, dict of series</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="c1"># from dict of lists
</span><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">'name1'</span><span class="p">,</span> <span class="s">'name2'</span><span class="p">,</span> <span class="s">'name3'</span><span class="p">,</span> <span class="s">'name4'</span><span class="p">]</span>
<span class="n">values1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">46</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">88</span><span class="p">]</span>
<span class="n">values2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">84</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">34</span><span class="p">]</span>

<span class="n">dict1</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'name'</span><span class="p">:</span> <span class="n">names</span><span class="p">,</span>
  <span class="s">'values1'</span><span class="p">:</span> <span class="n">values1</span><span class="p">,</span>
  <span class="s">'values2'</span><span class="p">:</span> <span class="n">values2</span>
<span class="p">}</span>

<span class="n">dict2</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'name'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">names</span><span class="p">),</span>
  <span class="s">'values1'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">values1</span><span class="p">),</span>
  <span class="s">'values2'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">values2</span><span class="p">)</span>
<span class="p">}</span>

<span class="n">dict3</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'name'</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">names</span><span class="p">),</span>
  <span class="s">'values1'</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">values1</span><span class="p">),</span>
  <span class="s">'values2'</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">values2</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1"># 아래 셋은 모두 동일
</span><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">dict1</span><span class="p">)</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">dict2</span><span class="p">)</span>
<span class="n">df3</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">dict3</span><span class="p">)</span>

<span class="s">'''
        0    1    2
0   name1   46   84
1   name2   52   74
2   name3   64   24
3   name4   88   34
'''</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>From list of dicts</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'name1'</span><span class="p">,</span> <span class="s">'value1'</span><span class="p">:</span> <span class="mi">46</span><span class="p">,</span> <span class="s">'value2'</span><span class="p">:</span> <span class="mi">84</span><span class="p">},</span>
  <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'name2'</span><span class="p">,</span> <span class="s">'value1'</span><span class="p">:</span> <span class="mi">52</span><span class="p">,</span> <span class="s">'value2'</span><span class="p">:</span> <span class="mi">74</span><span class="p">},</span>
  <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'name3'</span><span class="p">,</span> <span class="s">'value1'</span><span class="p">:</span> <span class="mi">64</span><span class="p">,</span> <span class="s">'value2'</span><span class="p">:</span> <span class="mi">24</span><span class="p">},</span>
  <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'name4'</span><span class="p">,</span> <span class="s">'value1'</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s">'value2'</span><span class="p">:</span> <span class="mi">34</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">my_list</span><span class="p">)</span>

<span class="s">'''
        0    1    2
0   name1   46   84
1   name2   52   74
2   name3   64   24
3   name4   88   34
'''</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="pandas의-데이터-타입">pandas의 데이터 타입</h3>

<ul>
  <li>한 column 내에서는 모든 값이 동일한 타입</li>
  <li>
    <p>pandas의 dtype들</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">dtype</th>
          <th style="text-align: center">설명</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">int64</td>
          <td style="text-align: center">정수</td>
        </tr>
        <tr>
          <td style="text-align: center">float64</td>
          <td style="text-align: center">소수</td>
        </tr>
        <tr>
          <td style="text-align: center">object</td>
          <td style="text-align: center">텍스트</td>
        </tr>
        <tr>
          <td style="text-align: center">bool</td>
          <td style="text-align: center">불린(참과 거짓)</td>
        </tr>
        <tr>
          <td style="text-align: center">datetime64</td>
          <td style="text-align: center">날짜와 시간</td>
        </tr>
        <tr>
          <td style="text-align: center">category</td>
          <td style="text-align: center">카테고리</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>pandas로 데이터 읽어들이기
    <ul>
      <li>csv: comma-separated values. 쉼표로 나뉘어져 있음
        <ul>
          <li>헤더: column 이름</li>
          <li><code class="language-plaintext highlighter-rouge">pd.read_csv(file_name)</code>: csv파일 읽기
            <ul>
              <li><code class="language-plaintext highlighter-rouge">header = None</code>: 첫 row를 레코드로</li>
              <li><code class="language-plaintext highlighter-rouge">index_col = 0</code>: 첫 column을 이름으로</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Computer Science" /><category term="Data Science" /><summary type="html"><![CDATA[데이터 사이언스란?]]></summary></entry><entry><title type="html">JavaScript 기초</title><link href="http://localhost:4000/coding/language/javascript/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B8%B0%EC%B4%88/" rel="alternate" type="text/html" title="JavaScript 기초" /><published>2023-07-06T00:00:00+09:00</published><updated>2023-07-07T10:34:00+09:00</updated><id>http://localhost:4000/coding/language/javascript/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EA%B8%B0%EC%B4%88</id><content type="html" xml:base="http://localhost:4000/coding/language/javascript/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B8%B0%EC%B4%88/"><![CDATA[<h2 id="자바스크립트-기초">자바스크립트 기초</h2>

<ul>
  <li>HTML 파일의 <code class="language-plaintext highlighter-rouge">body</code> 부분에 <code class="language-plaintext highlighter-rouge">&lt;script src="index.js"&gt;&lt;/script&gt;</code>를 추가함으로써 자바스크립트 파일을 사용할 수 있다.</li>
  <li>코멘트: 여러 줄 <code class="language-plaintext highlighter-rouge">/* */</code>, 한 줄 <code class="language-plaintext highlighter-rouge">//</code></li>
</ul>

<h3 id="1-숫자형number"><strong>1. 숫자형(Number)</strong></h3>

<ul>
  <li>
    <p>선언</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">k</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>연산</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">8</span><span class="p">);</span> <span class="c1">// 9</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">6</span> <span class="o">-</span> <span class="mi">7</span><span class="p">);</span> <span class="c1">// -1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// 4</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">4</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// 1.5</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">7</span> <span class="o">%</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// 8</span>
<span class="cm">/* 버림 나눗셈 연산은 없다. */</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>할당 연산자</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 5</span>

<span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="p">;</span>
<span class="nx">j</span> <span class="o">*=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span> <span class="c1">// -15</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>증가, 감소 연산자</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

<span class="nx">i</span><span class="o">++</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 6</span>

<span class="nx">i</span><span class="o">--</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 5</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-문자열string"><strong>2. 문자열(String)</strong></h3>

<ul>
  <li>
    <p>선언</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">str1</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello World!</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 큰따옴표</span>
<span class="kd">let</span> <span class="nx">str2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello World!</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 작은따옴표</span>
<span class="kd">let</span> <span class="nx">str3</span> <span class="o">=</span> <span class="s2">`Hello World!`</span><span class="p">;</span> <span class="c1">// 백틱(Backtick)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>문자열 붙이기(concatenation)</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 문자열 붙이기 */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello </span><span class="dl">"</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">World!</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Hello World!</span>

<span class="cm">/* 문자열 변수 붙이기 */</span>
<span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello </span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">World!</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span> <span class="c1">// Hello World!</span>

<span class="cm">/* 문자열에서도 더하기 할당 연산자 사용 가능 */</span>
<span class="nx">x</span> <span class="o">+=</span> <span class="nx">y</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 'Hello World!</span>

<span class="cm">/* 문자열이 아닌 다른 자료형도 문자열로 변환 */</span>
<span class="kd">let</span> <span class="nx">str1</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">햄버거의 가격은 </span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">str2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">원입니다.</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str1</span> <span class="o">+</span> <span class="nx">num</span> <span class="o">+</span> <span class="nx">str2</span><span class="p">);</span> <span class="c1">// 햄버거의 가격은 10000원입니다.</span>

<span class="cm">/* 문자열 반복하기(Python에서 *연산자와 동일) */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>문자열 포매팅(formatting)</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">formatString1</span> <span class="o">=</span> <span class="s2">`햄버거의 가격은 </span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">원입니다.`</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">formatString1</span><span class="p">);</span> <span class="c1">// 햄버거의 가격은 10000원입니다.</span>

<span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">formatString2</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">i</span><span class="p">}</span><span class="s2"> 더하기 </span><span class="p">${</span><span class="nx">j</span><span class="p">}</span><span class="s2">은 </span><span class="p">${</span><span class="nx">i</span> <span class="o">+</span> <span class="nx">j</span><span class="p">}</span><span class="s2">입니다.`</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">formatString2</span><span class="p">);</span> <span class="c1">// 10 더하기 20은 30입니다.</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>특수 문자열</p>

    <table>
      <tbody>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">\n</code></td>
          <td>줄바꿈</td>
        </tr>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">\t</code></td>
          <td>탭</td>
        </tr>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">\'</code></td>
          <td>작은따옴표</td>
        </tr>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">\"</code></td>
          <td>큰따옴표</td>
        </tr>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">\\</code></td>
          <td>백슬래시</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="3-불린형boolean"><strong>3. 불린형(Boolean)</strong></h3>

<ul>
  <li>
    <p>선언</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>비교 연산자</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// true</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">===</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">!==</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Hell</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// false</span>
</code></pre></div>    </div>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">==</code> 연산자는 자동으로 형 변환(type conversion)을 해준다.</p>

        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">3</span><span class="dl">"</span> <span class="o">==</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">3</span><span class="dl">"</span> <span class="o">===</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// false</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>조합 연산자</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* and */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// false</span>

<span class="cm">/* or */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">||</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// true</span>

<span class="cm">/* not */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div>    </div>

    <ul>
      <li>비교가 불가능할 경우(ex&gt; <code class="language-plaintext highlighter-rouge">NaN</code> 비교) <code class="language-plaintext highlighter-rouge">false</code> 출력</li>
    </ul>
  </li>
</ul>

<h3 id="형-변환">형 변환</h3>

<ul>
  <li>
    <p>형 변환</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"> </th>
          <th style="text-align: center">문법</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">숫자로 변환</td>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">Number()</code></td>
        </tr>
        <tr>
          <td style="text-align: center">문자열로 변환</td>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">String()</code></td>
        </tr>
        <tr>
          <td style="text-align: center">불린으로 변환</td>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">Boolean()</code></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>자료형 확인: <code class="language-plaintext highlighter-rouge">typeof</code></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">// number</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">typeof</code>의 연산 순서는 사칙연산보다 높다.</li>
    </ul>
  </li>
  <li>
    <p>Truthy와 Falsy</p>

    <ul>
      <li>Truthy: 불린형으로 변환했을 때 <code class="language-plaintext highlighter-rouge">true</code>가 되는 값</li>
      <li>Falsy: 불린형으로 변환했을 때 <code class="language-plaintext highlighter-rouge">false</code>가 되는 값</li>
    </ul>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">Truthy</th>
          <th style="text-align: center">Falsy</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">true</code></td>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">false</code></td>
        </tr>
        <tr>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">0</code>을 제외한 모든 숫자<br />(음수, 소수 포함)</td>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">0</code></td>
        </tr>
        <tr>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">''</code>을 제외한 모든 문자열<br />(공백으로만 이루어져 있는 문자열 포함)</td>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">''</code></td>
        </tr>
        <tr>
          <td style="text-align: center"> </td>
          <td style="text-align: center"><code class="language-plaintext highlighter-rouge">null</code>, <code class="language-plaintext highlighter-rouge">undefined</code>, <code class="language-plaintext highlighter-rouge">NaN</code></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">null</code>과 <code class="language-plaintext highlighter-rouge">undefined</code></p>

    <ul>
      <li>값이 없다.</li>
      <li><code class="language-plaintext highlighter-rouge">null</code>: 의도적으로 포현할 때 사용하는 값. type은 <code class="language-plaintext highlighter-rouge">object</code></li>
      <li><code class="language-plaintext highlighter-rouge">undefined</code>: 값이 없다는 것을 확인하는 값(변수 할당 X, 반환 없는 함수 등). type은 <code class="language-plaintext highlighter-rouge">undefined</code></li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">null</span> <span class="o">==</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">null</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// false</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="제어문">제어문</h2>

<h3 id="1-조건문">1. 조건문</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">else</code>, <code class="language-plaintext highlighter-rouge">else if</code></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="cm">/* 조건 부분 */</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-반복문">2. 반복문</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">for</code>, <code class="language-plaintext highlighter-rouge">while</code></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="cm">/* 초기화 부분 */</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="cm">/* 조건 부분 */</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="cm">/* 추가동작 부분 */</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="k">while</span> <span class="p">(</span><span class="cm">/* 조건 부분 */</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-switch-문">3. <code class="language-plaintext highlighter-rouge">switch</code> 문</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">select</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">;</span>

<span class="cm">/* 과일 fruit에 따라 메시지를 출력해 줍니다. */</span>
<span class="k">switch</span> <span class="p">(</span><span class="nx">fruit</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">case</span> <span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">:</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">:</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="dl">"</span><span class="s2">C</span><span class="dl">"</span><span class="p">:</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">C</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="nl">default</span><span class="p">:</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">else</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4-break-문-continue-문">4. <code class="language-plaintext highlighter-rouge">break</code> 문, <code class="language-plaintext highlighter-rouge">continue</code> 문</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">break</code>문: 반복문 및 <code class="language-plaintext highlighter-rouge">switch</code>문 종료</li>
  <li><code class="language-plaintext highlighter-rouge">continue</code>문: 현재 반복문을 한 번 건너 뜀</li>
</ul>

<h3 id="변수의-scope">변수의 scope</h3>

<ul>
  <li>변수가 사용 가능한 범위</li>
  <li>
    <p>로컬 변수와 글로벌 변수</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><code class="language-plaintext highlighter-rouge">Python</code></th>
          <th style="text-align: center"><code class="language-plaintext highlighter-rouge">JavaScript</code></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">함수의 안팎</td>
          <td style="text-align: center">블록(<code class="language-plaintext highlighter-rouge">{}</code>)의 안팎</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h2 id="심화-자료형">심화 자료형</h2>

<h3 id="배열">배열</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Python</code>의 <code class="language-plaintext highlighter-rouge">list</code>와 동일</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">element0</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">element1</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">element2</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">element3</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">element4</span><span class="dl">"</span><span class="p">];</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>인덱싱</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
<span class="c1">// 배열 범위를 벗어나면 undefined</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>슬라이싱</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span> <span class="c1">// 1부터 3까지</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span> <span class="c1">// 3부터 끝까지</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">slice</span><span class="p">());</span> <span class="c1">// 배열 전체</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>배열 요소 수정, 추가, 삭제</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 요소 수정 */</span>
<span class="nx">list</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">new_element2</span><span class="dl">"</span><span class="p">;</span>

<span class="cm">/* 요소 추가 */</span>
<span class="kd">let</span> <span class="nx">newLength</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">element5</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newLength</span><span class="p">);</span> <span class="c1">// 6</span>

<span class="cm">/* 요소 삭제 */</span>
<span class="kd">let</span> <span class="nx">lastElement</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lastElement</span><span class="p">);</span> <span class="c1">// element5</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">.splice</code> 메소드</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">.splice(start, deleteCount, item1, item2, ...)</code></li>
      <li><code class="language-plaintext highlighter-rouge">start</code>에서 시작하여 <code class="language-plaintext highlighter-rouge">deleteCount</code>만큼 삭제하고, 삭제한 부분에 <code class="language-plaintext highlighter-rouge">item1</code>, <code class="language-plaintext highlighter-rouge">item2</code>, <code class="language-plaintext highlighter-rouge">...</code>를 추가</li>
      <li><code class="language-plaintext highlighter-rouge">deleteCount</code>가 없으면 끝까지 삭제</li>
      <li><code class="language-plaintext highlighter-rouge">deleteCount</code>가 0이면 삭제를 하지 않고 <code class="language-plaintext highlighter-rouge">start</code> 위치부터 <code class="language-plaintext highlighter-rouge">item</code> 추가</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">list</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="dl">"</span><span class="s2">element6</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>반복문: <code class="language-plaintext highlighter-rouge">for...of</code></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">element</span> <span class="k">of</span> <span class="nx">list</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="객체">객체</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Python</code>의 <code class="language-plaintext highlighter-rouge">dict</code>와 동일</li>
  <li>
    <p>key-value 쌍을 property(프로퍼티) 라고 한다.</p>

    <ul>
      <li>key: property name(프로퍼티 이름)
        <ul>
          <li>문자열 타입으로, 꼭 따옴표를 쓰지 않아도 문자열로 인식하므로 생략하는 경우가 많다.</li>
          <li>그러나, 알파벳 문자, 언더바 기호, 달러 기호가 아닌 다른 문자로 시작하거나, 중간에 공백이나 하이픈 기호로 연결되어 있으면 따옴표를 써주어야 한다.</li>
        </ul>
      </li>
      <li>value: property value(프로퍼티 값)
        <ul>
          <li>어떠한 자료형이어도 가능</li>
        </ul>
      </li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">stringValue</span><span class="p">:</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">integerValue</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
  <span class="na">listValue</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">element0</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">element1</span><span class="dl">"</span><span class="p">],</span>
  <span class="na">nullValue</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="na">objectValue</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">str</span><span class="p">:</span> <span class="dl">"</span><span class="s2">objectstring</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">num</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>접근</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">[</span><span class="dl">"</span><span class="s2">stringValue</span><span class="dl">"</span><span class="p">]);</span> <span class="c1">// string</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">stringValue</span><span class="p">);</span> <span class="c1">// string</span>

<span class="kd">let</span> <span class="nx">propertyName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">stringValue</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">[</span><span class="nx">propertyName</span><span class="p">]);</span> <span class="c1">// string</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">objectValue</span><span class="p">.</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// objectstring</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">[</span><span class="dl">"</span><span class="s2">objectValue</span><span class="dl">"</span><span class="p">].</span><span class="nx">str</span><span class="p">);</span> <span class="c1">// objectstring</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">objectValue</span><span class="p">[</span><span class="dl">"</span><span class="s2">str</span><span class="dl">"</span><span class="p">]);</span> <span class="c1">// objectstring</span>

<span class="cm">/* 존재하지 않는 프로퍼티에 접근 */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">undefinedValue</span><span class="p">);</span> <span class="c1">// undefined</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>탐색</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">integerValue</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">object</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">undefinedValue</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">obejct</span><span class="p">);</span> <span class="c1">// false</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>요소 추가, 수정, 삭제</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 요소 수정 */</span>
<span class="nx">object</span><span class="p">.</span><span class="nx">stringValue</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">newString</span><span class="dl">"</span><span class="p">;</span>

<span class="cm">/* 요소 추가 */</span>
<span class="nx">object</span><span class="p">.</span><span class="nx">newValue</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="cm">/* 요소 삭제 */</span>
<span class="k">delete</span> <span class="nx">object</span><span class="p">.</span><span class="nx">newValue</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>반복문: <code class="language-plaintext highlighter-rouge">for...in</code></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>메소드</p>

    <ul>
      <li>프로퍼티 값은 함수가 될 수 있다. 이를 메소드(Method)라 한다.</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">foo1</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Foo</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">foo2</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Foo </span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">functions</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">func1</span><span class="p">:</span> <span class="nx">foo1</span><span class="p">,</span>
  <span class="na">func2</span><span class="p">:</span> <span class="nx">foo2</span><span class="p">,</span>
  <span class="na">func3</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Foo </span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="nx">functions</span><span class="p">.</span><span class="nx">foo1</span><span class="p">();</span> <span class="c1">// Foo</span>
<span class="nx">functions</span><span class="p">.</span><span class="nx">foo2</span><span class="p">(</span><span class="dl">"</span><span class="s2">Baa</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Foo Baa</span>
<span class="nx">functions</span><span class="p">.</span><span class="nx">foo3</span><span class="p">(</span><span class="dl">"</span><span class="s2">Baa</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Foo Baa</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="숫자형-문자열-메소드">숫자형, 문자열 메소드</h3>

<ul>
  <li>자바스크립트는 객체가 아닌 다른 자료형도 객체처럼 구현이 되어있다. 따라서 숫자형 및 문자형 등에도 다양한 프로퍼티 및 메소드가 존재한다.</li>
  <li>
    <p><strong>숫자형 메소드</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">.toFixed()</code>: 소수의 소숫점 아래 자릿수를 고정해준다.</p>

        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 숫자에 바로 사용 */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">((</span><span class="mf">0.3</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// 0.30</span>

<span class="cm">/* 숫자형 변수에 사용 */</span>
<span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mf">0.3591</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span> <span class="c1">// 0.359</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>문자열 메소드</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">.length</code>: 문자열의 길이</li>
      <li><code class="language-plaintext highlighter-rouge">.charAt()</code>, <code class="language-plaintext highlighter-rouge">[]</code>: 특정 위치(인덱스)에 있는 문자 접근</li>
      <li><code class="language-plaintext highlighter-rouge">.slice()</code>: 두 인덱스 사이의 문자열을 잘라내 줌</li>
      <li><code class="language-plaintext highlighter-rouge">.toUpperCase()</code>: 알파벳 문자를 모두 대문자로</li>
      <li><code class="language-plaintext highlighter-rouge">.toLowerCase()</code>: 알파벳 문자를 모두 소문자로</li>
      <li><code class="language-plaintext highlighter-rouge">.repeat()</code>: 문자열 반복</li>
      <li><code class="language-plaintext highlighter-rouge">.trim()</code>: 문자열 시작과 끝 부분에 있는 모든 공백 문자를 제거</li>
    </ul>
  </li>
</ul>

<h3 id="const"><code class="language-plaintext highlighter-rouge">const</code></h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span> <span class="c1">// 상수는 이름을 대문자로 쓰는 것이 권장된다.</span>

<span class="cm">/*
 * 상수에 할당된 리스트 및 객체를 바꾸는 것은 오류가 발생한다.
 * 그러나 상수 내부의 요소를 바꾸는 것은 오류가 발생하지 않는다.
 * 따라서, 변수나 객체를 선언할 때는 계속 할당된 값을 바꾸는 상황이 아니라면 대체로 const를 선언한다.
 */</span>
<span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">element0</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">element1</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">element2</span><span class="dl">"</span><span class="p">];</span>

<span class="nx">list</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">newElement2</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 에러 X</span>

<span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">newElement0</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">newElement1</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">newElement2</span><span class="dl">"</span><span class="p">];</span> <span class="c1">// 에러 O</span>
</code></pre></div></div>

<h3 id="math-date-내장-객체"><code class="language-plaintext highlighter-rouge">Math</code>, <code class="language-plaintext highlighter-rouge">Date</code> 내장 객체</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Math</code></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* PI 프로퍼티 */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span> <span class="c1">// 3.141592653598793</span>

<span class="cm">/* floor() 내림 함수 */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="mi">2</span><span class="p">)):</span> <span class="c1">// 1</span>

<span class="cm">/* ceil() 올림 함수 */</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// 2</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Date</code></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 현재 날짜 생성 */</span>
<span class="kd">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>

<span class="cm">/* 특정 날짜 생성 */</span>
<span class="kd">const</span> <span class="nx">date1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="dl">"</span><span class="s2">2023-07-07</span><span class="dl">"</span><span class="p">);</span>

<span class="cm">/* 문자열로 날짜 생성 YYYY-MM-DDThh:mm:ss */</span>
<span class="kd">const</span> <span class="nx">date2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="dl">"</span><span class="s2">2023-07-07T10:05:00</span><span class="dl">"</span><span class="p">);</span>

<span class="cm">/* 숫자로 날짜 생성 new Date(year, month, date)
  주의: month는 월의 인덱스라서 1월은 0, 2월은 1, ..., 12월은 11이다. */</span>
<span class="kd">const</span> <span class="nx">date3</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2023</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>

<span class="cm">/* 숫자로 날짜 생성 new Date(year, month, date, hours, minutes, seconds)
  주의: month는 월의 인덱스라서 1월은 0, 2월은 1, ..., 12월은 11이다. */</span>
<span class="kd">const</span> <span class="nx">date4</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2023</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">05</span><span class="p">,</span> <span class="mi">00</span><span class="p">);</span>

<span class="cm">/* 날짜 포매팅 */</span>
<span class="kd">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2023</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">05</span><span class="p">,</span> <span class="mi">00</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">());</span> <span class="c1">// 주의: 0에서 시작</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getDate</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getHours</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getMilliseconds</span><span class="p">());</span>

<span class="cm">/* 날짜 연산 */</span>
<span class="kd">const</span> <span class="nx">date1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2023</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">00</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">date2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2023</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">00</span><span class="p">,</span> <span class="mi">00</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">timeDifference</span> <span class="o">=</span> <span class="nx">date2</span> <span class="o">-</span> <span class="nx">date1</span><span class="p">;</span> <span class="c1">// 밀리초로 저장</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">timeDifference</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">timeDifference</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> 밀리초</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">timeDifference</span> <span class="o">/</span> <span class="mi">1000</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> 초</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">timeDifference</span> <span class="o">/</span> <span class="mi">1000</span> <span class="o">/</span> <span class="mi">60</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> 분</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">timeDifference</span> <span class="o">/</span> <span class="mi">1000</span> <span class="o">/</span> <span class="mi">60</span> <span class="o">/</span> <span class="mi">60</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> 시간</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Language" /><category term="JavaScript" /><summary type="html"><![CDATA[자바스크립트 기초]]></summary></entry><entry><title type="html">좋은 알고리즘이란?</title><link href="http://localhost:4000/coding/computer%20science/algorithm/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%981/" rel="alternate" type="text/html" title="좋은 알고리즘이란?" /><published>2023-03-16T00:00:00+09:00</published><updated>2023-03-17T00:20:00+09:00</updated><id>http://localhost:4000/coding/computer%20science/algorithm/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%981</id><content type="html" xml:base="http://localhost:4000/coding/computer%20science/algorithm/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%981/"><![CDATA[<h2 id="알고리즘이란">알고리즘이란?</h2>

<ul>
  <li>컴퓨터 알고리즘: 컴퓨터가 어떤 문제를 해결하기 위해서 컴퓨터가 이해할 수 있는 방식으로 정리되어 있는 해결 방법</li>
</ul>

<h2 id="하나의-문제-여러-가지-알고리즘">하나의 문제, 여러 가지 알고리즘</h2>

<h3 id="탐색">탐색</h3>

<ul>
  <li>저장된 정보들 중에서 원하는 값을 찾는 것</li>
</ul>

<ol>
  <li>
    <p>선형 탐색 알고리즘(linear search algorithm)</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">linear_search</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">some_list</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">some_list</span><span class="p">)):</span>
    <span class="k">if</span> <span class="n">some_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">element</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">i</span>
  <span class="k">return</span> <span class="bp">None</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>이진 탐색 알고리즘(binary search algorithm)</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">some_list</span><span class="p">):</span>
  <span class="n">start_index</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">end_index</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">some_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>

  <span class="k">while</span> <span class="n">start_index</span> <span class="o">&lt;=</span> <span class="n">end_index</span><span class="p">:</span>
    <span class="n">midpoint</span> <span class="o">=</span> <span class="p">(</span><span class="n">start_index</span> <span class="o">+</span> <span class="n">end_index</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="k">if</span> <span class="n">some_list</span><span class="p">[</span><span class="n">midpoint</span><span class="p">]</span> <span class="o">==</span> <span class="n">element</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">midpoint</span>
    <span class="k">elif</span> <span class="n">some_list</span><span class="p">[</span><span class="n">midpoint</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">element</span><span class="p">:</span>
      <span class="n">end_index</span> <span class="o">=</span> <span class="n">midpoint</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="n">start_index</span> <span class="o">=</span> <span class="n">midpoint</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="k">return</span> <span class="bp">None</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="정렬sorting">정렬(Sorting)</h3>

<ul>
  <li>리스트의 원소들을 특정 순서로 정리하는 것</li>
</ul>

<ol>
  <li>선택 정렬(Selection Sort): 각 위치에 어떤 값이 들어갈지 찾는다.</li>
  <li>삽입 정렬(Insertion Sort): 각 값이 어떤 위치에 들어갈지 찾는다.</li>
</ol>

<ul>
  <li>정렬 문제: 절대적인 좋은 답 없음
    <ul>
      <li>거의 정렬된 리스트: 삽입 정렬(Insertion Sort). 가장 빠름</li>
      <li>무작위 순서의 리스트: 힙 정렬(Heapsort)</li>
      <li>반대로 정렬된 리스트: 삽입 정렬(Insertion Sort). 가장 느림</li>
      <li>선택 정렬(Selection Sort), 합병 정렬(Merge Sort): 상황에 영향을 받지 않고 일정한 시간이 소요</li>
    </ul>
  </li>
</ul>

<h2 id="알고리즘-평가법">알고리즘 평가법</h2>

<h3 id="시간-복잡도time-complexity">시간 복잡도(Time Complexity)</h3>

<ul>
  <li>
    <p>점근 표기법(Big-O)</p>

    <ol>
      <li>
        <p>선형 탐색과 이진 탐색</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center"> </th>
              <th style="text-align: center">선형 탐색</th>
              <th style="text-align: center">이진 탐색</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">최고의 경우</td>
              <td style="text-align: center">$O(1)$</td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">최악의 경우</td>
              <td style="text-align: center">$O(n)$</td>
              <td style="text-align: center">$O(\lg n)$</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">list</code> Operations</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">Operation</th>
              <th style="text-align: center">Code</th>
              <th style="text-align: center">Average Case</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">인덱싱</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">list[index]</code></td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">정렬</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">list.sort()</code><br /><code class="language-plaintext highlighter-rouge">sorted(list)</code></td>
              <td style="text-align: center">$O(n\lg n)$</td>
            </tr>
            <tr>
              <td style="text-align: center">뒤집기</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">list.reverse()</code></td>
              <td style="text-align: center">$O(n)$</td>
            </tr>
            <tr>
              <td style="text-align: center">탐색</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">element in list</code></td>
              <td style="text-align: center">$O(n)$</td>
            </tr>
            <tr>
              <td style="text-align: center">끝에 요소 추가</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">list.append(element)</code></td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">중간에 요소 추가</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">list.insert(index, element)</code></td>
              <td style="text-align: center">$O(n)$</td>
            </tr>
            <tr>
              <td style="text-align: center">삭제</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">del list[index]</code></td>
              <td style="text-align: center">$O(n)$</td>
            </tr>
            <tr>
              <td style="text-align: center">최솟값, 최댓값 찾기</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">min(list)</code><br /><code class="language-plaintext highlighter-rouge">max(list)</code></td>
              <td style="text-align: center">$O(n)$</td>
            </tr>
            <tr>
              <td style="text-align: center">길이 구하기</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">len(list)</code></td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">슬라이싱</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">list[a:b]</code></td>
              <td style="text-align: center">$O(b-a)$</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">dict</code> Operations</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">Operation</th>
              <th style="text-align: center">Code</th>
              <th style="text-align: center">Average Case</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">값 찾기</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">dict[key]</code></td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">값 넣어주기/찾아주기</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">dict[key] = value</code></td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">값 삭제</td>
              <td style="text-align: center"><code class="language-plaintext highlighter-rouge">del dict[key]</code></td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ol>

    <ul>
      <li>$O(1)$: input의 크기가 소요 시간에 영향 X</li>
      <li>$O(n)$: 반복문 횟수가 input의 크기에 비례</li>
      <li>$O(n^2)$: 반복문 내부에 반복문. 둘 다 input의 크기에 비례</li>
      <li>$O(n^3)$: input의 크기에 비례하는 반복문이 3번 중첩</li>
      <li>$O(\lg n)$: $i$가 두 배씩 증가, 반씩 감소</li>
      <li>$O(n\lg n)$: $O(n)$과 $O(\lg n)$이 겹쳐진 것</li>
    </ul>
  </li>
</ul>

<h3 id="공간-복잡도space-complexity">공간 복잡도(Space Complexity)</h3>

<ul>
  <li>input 크기에 비례해서 알고리즘이 사용하는 메모리 공간</li>
  <li>Big-O 표기법 사용 가능</li>
</ul>

<h3 id="유용한-파이썬-함수-시간복잡도-정리">유용한 파이썬 함수 시간복잡도 정리</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">type</code>: parameter의 data type이 return. $O(1)$</li>
  <li><code class="language-plaintext highlighter-rouge">max</code>, <code class="language-plaintext highlighter-rouge">min</code>: 가장 큰 값 혹은 작은 값. $O(n)$</li>
  <li><code class="language-plaintext highlighter-rouge">str</code>: 숫자를 문자열로. 시간 복잡도는 자릿수에 비례($O(\lg n)$)</li>
  <li><code class="language-plaintext highlighter-rouge">append</code>: $O(1)$</li>
  <li><code class="language-plaintext highlighter-rouge">insert</code>, <code class="language-plaintext highlighter-rouge">del</code>, <code class="language-plaintext highlighter-rouge">index</code>, <code class="language-plaintext highlighter-rouge">reverse</code>: $O(n)$</li>
  <li><code class="language-plaintext highlighter-rouge">sort</code>, <code class="language-plaintext highlighter-rouge">sorted</code>: sort는 리스트 자체를 정렬, sorted는 정렬된 새로운 리스트를 return. $O(n\lg n)$</li>
  <li><code class="language-plaintext highlighter-rouge">list[a:b]</code>: 리스트의 일부를 받아올 수 있음. $O(b-a)$</li>
  <li><code class="language-plaintext highlighter-rouge">len</code>: 리스트, 사전, 문자열 등의 길이를 return. $O(1)$</li>
</ul>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Computer Science" /><category term="Algorithm" /><summary type="html"><![CDATA[알고리즘이란?]]></summary></entry><entry><title type="html">트리</title><link href="http://localhost:4000/coding/computer%20science/data%20structure/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B02/" rel="alternate" type="text/html" title="트리" /><published>2023-03-16T00:00:00+09:00</published><updated>2023-03-17T02:12:00+09:00</updated><id>http://localhost:4000/coding/computer%20science/data%20structure/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B02</id><content type="html" xml:base="http://localhost:4000/coding/computer%20science/data%20structure/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B02/"><![CDATA[<h2 id="트리란">트리란?</h2>

<ul>
  <li>트리: 데이터 상-하 관계를 저장하는 자료 구조
    <ul>
      <li>계층적 관계</li>
      <li>e.g. 컴퓨터 폴더 구조, 클래스 상속 관계</li>
    </ul>
  </li>
  <li>트리 용어
    <ul>
      <li>뿌리 노드(root node): 트리의 시작 노드</li>
      <li>부모 노드: 특정 노드의 직속 상위 노드</li>
      <li>자식 노드: 특정 노드의 직속 하위 노드</li>
      <li>형제 노드: 같은 부모를 같는 노드</li>
      <li>leaf 노드(잎/말단 노드): 자식 노드를 갖고 있지 않은, 가장 말단에 있는 노드</li>
      <li>깊이: 특정 노드가 root 노드에서 떨어져 있는 거리(뿌리 노드 깊이 = 0)</li>
      <li>레벨: 깊이 + 1</li>
      <li>부분 트리(sub-tree): 현재 트리의 일부분을 이루고 있는 더 작은 트리</li>
    </ul>
  </li>
  <li>트리의 활용
    <ul>
      <li>정렬, 압축 등 다양한 컴퓨터 과학 문제를 해결 가능</li>
      <li>다양한 추상 자료형 구현</li>
    </ul>
  </li>
  <li>
    <p>이진 트리</p>

    <ul>
      <li>
        <p>각 노드가 최대 2개의 자식 노드를 가질 수 있는 트리</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
  <span class="s">"""이진 트리 노드 클래스"""</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="s">"""데이터와 두 자식 노드에 대한 레퍼런스를 갖는다"""</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="bp">None</span>

<span class="s">"""노드 인스턴스 생성"""</span>
<span class="n">root_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">node_B</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">node_C</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">node_D</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
<span class="n">node_E</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>

<span class="s">"""B와 C를 root 노드의 자식으로 지정"""</span>
<span class="n">root_node</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">node_B</span>
<span class="n">root_node</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">node_C</span>

<span class="s">"""D와 E를 B의 자식으로 지정"""</span>
<span class="n">node_B</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">node_D</span>
<span class="n">node</span><span class="p">.</span><span class="n">B</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">node_E</span>

<span class="c1"># root 노드에서 왼쪽 자식 노드 받아오기
</span><span class="n">test_node_1</span> <span class="o">=</span> <span class="n">root_node</span><span class="p">.</span><span class="n">left_child</span>

<span class="k">print</span><span class="p">(</span><span class="n">test_node_1</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>

<span class="c1"># 노드 B의 오른쪽 자식 노드 받아오기
</span><span class="n">test_node_2</span> <span class="o">=</span> <span class="n">test_node_1</span><span class="p">.</span><span class="n">right_child</span>

<span class="k">print</span><span class="p">(</span><span class="n">test_node_2</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>이진 트리의 종류</p>

        <ol>
          <li>정 이진 트리(Full Binary Tree): 모든 노드가 2개 또는 0개 자식을 갖는 이진 트리</li>
          <li>
            <p>완전 이진 트리(Complete Binary Tree): 마지막 레벨 직전 레벨까지 모든 노드들이 다 채워져 있고, 왼쪽부터 오른쪽 방향으로 노드들이 다 채워진 트리</p>

            <p><img src="/assets/images/자료구조/img3.png" alt="완전 이진 트리" /></p>

            <ul>
              <li>완전 이진 트리의 높이: 트리 안에 저장된 노드가 $n$개일 때, 높이는 $\log n$에 항상 비례</li>
              <li>자식 노드 찾기
                <ul>
                  <li>왼쪽 자식 노드: 자신의 노드의 2배</li>
                  <li>오른쪽 자식 노드: 자신의 노드의 2배 + 1</li>
                </ul>
              </li>
              <li>부모 노드 찾기: 자신의 노드의 2를 나눈 정수값</li>
              <li>
                <p>배열, 파이썬 <strong><code class="language-plaintext highlighter-rouge">list</code></strong>를 이용해서 구현</p>

                <p><img src="/assets/images/자료구조/img4.png" alt="완전 이진 트리 예시" /></p>

                <p><code class="language-plaintext highlighter-rouge">complete_binary_tree = [None, 1, 5, 12, 11, 9, 10, 14, 2, 10]</code></p>

                <ul>
                  <li>
                    <p>트리 탐색 <code class="language-plaintext highlighter-rouge">code</code></p>

                    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_parent_index</span><span class="p">(</span><span class="n">complete_binary_tree</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
  <span class="s">"""배열로 구현한 완전 이진 트리에서 index번째 노드의 부모 노드의 인덱스를 리턴하는 함수"""</span>
  <span class="k">return</span> <span class="n">index</span> <span class="o">//</span> <span class="mi">2</span> <span class="k">if</span> <span class="n">index</span> <span class="o">!=</span> <span class="mi">1</span> <span class="k">else</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">get_left_child_index</span><span class="p">(</span><span class="n">complete_binary_tree</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
  <span class="s">"""배열로 구현한 완전 이진 트리에서 index번째 노드의 왼쪽 자식 노드의 인덱스를 리턴하는 함수"""</span>
  <span class="k">return</span> <span class="n">index</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">complete_binary_tree</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">index</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">else</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">get_right_child_index</span><span class="p">(</span><span class="n">complete_binary_tree</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
  <span class="s">"""배열로 구현한 완전 이진 트리에서 index번째 노드의 오른쪽 자식 노드의 인덱스를 리턴하는 함수"""</span>
  <span class="k">return</span> <span class="n">index</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">complete_binary_tree</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">index</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">else</span> <span class="bp">None</span>
</code></pre></div>                    </div>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li>
            <p>포화 이진 트리(Perfect Binary Tree): 모든 레벨이 빠짐없이 다 노드로 채워져있는 이진 트리</p>

            <ul>
              <li>
                <p>정 이진 트리와 완전 이진 트리의 특성을 모두 가짐</p>

                <p><img src="/assets/images/자료구조/img5.png" alt="포화 이진 트리" /></p>
              </li>
              <li>
                <p>트리의 높이를 $h$, 노드 수를 $n$이라고 하면,</p>
              </li>
            </ul>

            <p>$n = 2^{h+1}-1$</p>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>
    <p>순회: 자료 구조에 저장된 모든 데이터를 도는 것</p>

    <ul>
      <li>
        <p>트리 순회: 재귀함수 사용</p>

        <ol>
          <li>pre-order 순회: 현재 노드 데이터 출력 → 재귀적으로 왼쪽 부분 트리 순회 → 재귀적으로 오른쪽 부분 트리 순회</li>
          <li>post-order 순회: 재귀적으로 왼쪽 부분 트리 순회 → 재귀적으로 오른쪽 부분 트리 순회 → 현재 노드 데이터 출력</li>
          <li>in-order 순회: 재귀적으로 왼쪽 부분 트리 순회 → 현재 노드 데이터 출력 → 재귀적으로 오른쪽 부분 트리 순회</li>
        </ol>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">traverse_inorder</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
  <span class="s">"""in-order 순회 함수"""</span>
  <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">left_child</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">traverse_inorder</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left_child</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">right_child</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">traverse_inorder</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right_child</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>트리를 순회하면 노드들 사이에 선형적 순서를 만들 수 있다.</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="힙">힙</h2>

<h3 id="힙-1">힙</h3>

<ul>
  <li>형태 속성: 완전 이진 트리</li>
  <li>힙 속성: 모든 노드의 데이터는 자식 노드들의 데이터보다 크거나 같다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">heapify</code></p>

    <ul>
      <li>부모 노드, 자식 노드 중 가장 큰 노드와 부모 노드를 교체, 교체된 자식 노드들에 대해 전부 동일하게 수행</li>
      <li>시간 복잡도: <span style="color:red"> $O(\log n)$ </span></li>
      <li>부분 트리를 힙으로 만들 수 있다.</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">heapify</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">tree_size</span><span class="p">):</span>
  <span class="s">"""heapify 함수"""</span>

  <span class="n">left_child_index</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">index</span>
  <span class="n">right_child_index</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>

  <span class="n">max_index</span> <span class="o">=</span> <span class="n">index</span>
  <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">left_cild_index</span> <span class="o">&lt;</span> <span class="n">tree_size</span> <span class="ow">and</span> <span class="n">tree</span><span class="p">[</span><span class="n">max_index</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">tree</span><span class="p">[</span><span class="n">left_child_index</span><span class="p">]:</span>
    <span class="n">max_index</span> <span class="o">=</span> <span class="n">left_child_index</span>
  <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">right_child_index</span> <span class="o">&lt;</span> <span class="n">tree_size</span> <span class="ow">and</span> <span class="n">tree</span><span class="p">[</span><span class="n">max_index</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">tree</span><span class="p">[</span><span class="n">right_child_index</span><span class="p">]:</span>
    <span class="n">max_index</span> <span class="o">=</span> <span class="n">right_child_index</span>

  <span class="k">if</span> <span class="n">max_index</span> <span class="o">!=</span> <span class="n">index</span><span class="p">:</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">max_index</span><span class="p">)</span>
    <span class="n">heapify</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">max_index</span><span class="p">,</span> <span class="n">tree_size</span><span class="p">)</span>
</code></pre></div>    </div>

    <ul>
      <li>마지막 인덱스부터 첫 인덱스까지 <code class="language-plaintext highlighter-rouge">heapify</code> 호출 ⇒ 트리 전체를 힙으로 만들 수 있다.
        <ul>
          <li>시간 복잡도: <span style="color:red"> $O(n \log n)$ </span></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="힙-정렬힙의-활용-1">힙 정렬(힙의 활용 1)</h3>

<ol>
  <li>마지막 인덱스부터 첫 인덱스까지 <code class="language-plaintext highlighter-rouge">heapify</code> → 뿌리 노드에 가장 큰 데이터가 위치</li>
  <li>뿌리 노드와 마지막 인덱스 노드의 위치를 교체</li>
  <li>마지막 인덱스 노드를 분리</li>
  <li>1-3을 모든 인덱스를 돌 때 까지 반복
⇒ 오른차순으로 정렬(cf. 내림차순으로 정렬: 힙 속성을 반대로 바꾼 후 실행)</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">heapsort</span><span class="p">(</span><span class="n">tree</span><span class="p">):</span>
  <span class="s">"""힙 정렬 함수"""</span>
  <span class="n">tree_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span>

  <span class="c1"># 마지막 인덱스부터 처음 인덱스까지 heapify를 호출한다.
</span>  <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">tree_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">heapify</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">tree_size</span><span class="p">)</span>

  <span class="c1"># 마지막 인덱스부터 처음 인덱스까지
</span>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">tree_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>  <span class="c1"># root 노드와 마지막 인덱스를 바꿔준 후
</span>    <span class="n">heapify</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="c1"># root 노드에 heapify를 호출한다
</span></code></pre></div></div>

<ul>
  <li>시간 복잡도: <span style="color:red"> $O(n \log n)$ </span></li>
</ul>

<h3 id="우선순위-큐힙의-활용-2">우선순위 큐(힙의 활용 2)</h3>

<p>⇒ 추상 자료형</p>

<ul>
  <li>
    <p><strong>우선순위 큐</strong></p>

    <ul>
      <li>데이터를 저장할 수 있다.</li>
      <li>저장한 데이터가 우선순위 순서대로 나온다.</li>
      <li>힙을 이용하여 효율적으로 구현 가능</li>
    </ul>
  </li>
  <li>
    <p>힙에 데이터 <strong>삽입</strong>하기</p>

    <ol>
      <li>힙의 마지막 인덱스에 데이터 삽입</li>
      <li>삽입한 데이터와 부모 노드의 데이터를 비교</li>
      <li>부모 노드의 데이터가 더 작으면 둘의 위치를 바꿔줌</li>
      <li>새로 삽입한 노드가 제 위치를 찾을 때 까지 반복</li>
    </ol>

    <ul>
      <li>시간 복잡도: <span style="color:red"> $O(\log n)$ </span></li>
    </ul>
  </li>
  <li>
    <p>힙에서 최고 우선순위 데이터 <strong>추출</strong>하기</p>

    <ol>
      <li>root 노드와 마지막 노드를 서로 바꿔 준다.</li>
      <li>마지막 노드의 데이터를 변수에 저장해 준다.</li>
      <li>마지막 노드를 삭제한다.</li>
      <li>root 노드에 <code class="language-plaintext highlighter-rouge">heapify</code>를 호출해서 망가진 힙 속성을 고친다.</li>
      <li>변수에 저장한 데이터를 리턴한다.(최고 우선순위 데이터)</li>
    </ol>

    <ul>
      <li>시간 복잡도: <span style="color:red"> $O(\log n)$ </span></li>
    </ul>
  </li>
  <li>
    <p>우선순위 큐 구현</p>

    <ul>
      <li>
        <p>정렬된 동적 배열, 정렬된 더블리 링크드 리스트, 힙</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center"> </th>
              <th style="text-align: center">정렬된 동적 배열</th>
              <th style="text-align: center">정렬된 더블리 링크드 리스트</th>
              <th style="text-align: center">힙</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">삽입</td>
              <td style="text-align: center">이진 탐색 $O(\log n)$<br />삽입 $O(n)$<br />⇒ $O(n)$</td>
              <td style="text-align: center">선형 탐색 $O(n)$<br />삽입 $O(1)$<br />⇒ $O(n)$</td>
              <td style="text-align: center">삽입 $O(\log n)$</td>
            </tr>
            <tr>
              <td style="text-align: center">우선순위 데이터 추출</td>
              <td style="text-align: center">맨 뒤에 있는 데이터<br />$O(1)$</td>
              <td style="text-align: center">마지막 데이터 추출<br />$O(1)$</td>
              <td style="text-align: center">$O(\log n)$</td>
            </tr>
            <tr>
              <td style="text-align: center"> </td>
              <td style="text-align: center"> </td>
              <td style="text-align: center"> </td>
              <td style="text-align: center"> </td>
            </tr>
            <tr>
              <td style="text-align: center">유리할 때</td>
              <td style="text-align: center">추출</td>
              <td style="text-align: center">추출</td>
              <td style="text-align: center">삽입</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

<h2 id="이진-탐색-트리">이진 탐색 트리</h2>

<ul>
  <li>
    <p><strong>이진 탐색 트리(Binary Search Tree)</strong></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">dict</code>, <code class="language-plaintext highlighter-rouge">set</code> 구현</li>
      <li>이진 트리
        <ul>
          <li>왼쪽 부분 트리에 있는 모든 노드는 그 노드의 데이터보다 작아야 한다.</li>
          <li>오른쪽 부분 트리에 있는 모든 노드는 그 노드의 데이터보다 커야 한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>이진 탐색 트리 노드 구현</p>

    <ul>
      <li>완전 이진 트리 X =&gt; 배열, 파이썬 리스트 X</li>
      <li>노드 클래스 생성하여 노드 인스턴스 연결</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_inorder</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
  <span class="s">"""주어진 노드를 in-order로 출력해주는 함수"""</span>
  <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">print_inorder</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left_child</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
    <span class="n">print_inorder</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right_child</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
  <span class="s">"""이진 트리 노드"""</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">class</span> <span class="nc">BinarySearchTree</span><span class="p">:</span>
  <span class="s">"""이진 탐색 트리 클래스"""</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>

  <span class="k">def</span> <span class="nf">print_sorted_tree</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="s">"""이진 탐색 트리 내의 데이터를 정렬된 순서로 출력해주는 메소드"""</span>
    <span class="n">print_inorder</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>  <span class="c1"># root 노드를 in-order로 출력한다.
</span>
<span class="c1"># 비어 있는 이진 탐색 트리 생성
</span><span class="n">bst</span> <span class="o">=</span> <span class="n">BinarySearchTree</span><span class="p">()</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>이진 탐색 트리 출력: in-order 순회를 통하여 값을 순서대로 출력 가능</p>
  </li>
  <li>
    <p><strong>삽입</strong></p>

    <ol>
      <li>새로운 노드 생성</li>
      <li>루트 노드부터 비교하면서 저장할 위치 찾음(새로운 노드가 비교할 노드보다 크면 오른쪽으로, 작으면 왼쪽으로)</li>
      <li>찾은 위치에 새롭게 만든 노드 연결</li>
    </ol>

    <ul>
      <li>시간 복잡도: <span style="color: red"> $O(h)$ </span> ($h$는 트리 높이)</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
  <span class="s">"""이진 탐색 트리 삽입 메소드"""</span>
  <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="c1"># 삽입할 데이터를 갖는 노드 생성
</span>
  <span class="c1"># 트리가 비었으면 새로운 노드를 root 노드로 만든다
</span>  <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">new_node</span>
    <span class="k">return</span>

  <span class="n">temp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span>  <span class="c1"># 저장하려는 위치를 찾기 위해 사용할 변수. root 노드로 초기화한다.
</span>  <span class="k">while</span> <span class="n">temp</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">data</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">data</span><span class="p">:</span>  <span class="c1"># 삽입하려는 데이터가 현재 노드 데이터보다 크다면
</span>      <span class="c1"># 오른쪽 자식이 없으면 새로운 노드를 현재 노드 오른쪽 자식으로 만듦
</span>      <span class="k">if</span> <span class="n">temp</span><span class="p">.</span><span class="n">right_child</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">new_node</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">temp</span>
        <span class="n">temp</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">new_node</span>
        <span class="k">return</span>
      <span class="c1"># 오른쪽 자식이 있으면 오른쪽 자식으로 간다.
</span>      <span class="k">else</span><span class="p">:</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">.</span><span class="n">right_child</span>
    <span class="k">else</span><span class="p">:</span> <span class="c1"># 삽입하려는 데이터가 현재 노드 데이터보다 작다면
</span>      <span class="c1"># 왼쪽 자식이 없으면 새로운 노드를 현재 노드 왼쪽 자식으로 만듦
</span>      <span class="k">if</span> <span class="n">temp</span><span class="p">.</span><span class="n">left_child</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">new_node</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">temp</span>
        <span class="n">temp</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">new_node</span>
        <span class="k">return</span>
      <span class="c1"># 왼쪽 자식이 있다면 왼쪽 자식으로 간다
</span>      <span class="k">else</span><span class="p">:</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">.</span><span class="n">left_child</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>탐색</strong></p>

    <ol>
      <li>루트 노드에서 시작</li>
      <li>주어진 노드의 데이터와 탐색하려는 데이터 비교</li>
      <li>탐색하려는 데이터가 더 크면 노드의 오른쪽 자식으로 간다. 탐색하려는 데이터가 더 작으면 노드의 왼쪽 자식으로 간다.</li>
      <li>2~4를 찾을 때 까지 반복</li>
      <li>탐색하려는 노드를 찾으면 리턴한다.</li>
    </ol>

    <ul>
      <li>시간 복잡도: <span style="color: red"> $O(h)$ </span> ($h$는 트리 높이)</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
  <span class="s">"""이진 트리 탐색 메소드. 찾는 데이터를 갖는 노드가 없으면 None을 리턴한다."""</span>
  <span class="n">temp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span>  <span class="c1"># 탐색용 변수. root 노드로 초기화
</span>
  <span class="c1"># 원하는 데이터를 갖는 노드를 찾을 때까지 돈다.
</span>  <span class="k">while</span> <span class="n">temp</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="c1"># 원하는 데이터를 갖는 노드를 찾으면 리턴
</span>    <span class="k">if</span> <span class="n">data</span> <span class="o">==</span> <span class="n">temp</span><span class="p">.</span><span class="n">data</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">temp</span>
    <span class="c1"># 원하는 데이터가 노드의 데이터보다 크면 오른쪽 자식 노드로 간다.
</span>    <span class="k">if</span> <span class="n">data</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">data</span><span class="p">:</span>
      <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">.</span><span class="n">right_child</span>
    <span class="c1"># 원하는 데이터가 노드의 데이터보다 작으면 왼쪽 자식 노드로 간다.
</span>    <span class="k">if</span> <span class="n">data</span> <span class="o">&lt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">data</span><span class="p">:</span>
      <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">.</span><span class="n">left_child</span>

  <span class="k">return</span> <span class="bp">None</span> <span class="c1"># 원하는 데이터가 트리에 없으면 None 리턴
</span></code></pre></div>    </div>
  </li>
  <li>
    <p><strong>삭제</strong></p>

    <ul>
      <li>삭제하려는 데이터를 갖는 노드를 먼저 찾아야 함(탐색)</li>
    </ul>

    <ol>
      <li>경우 1: 삭제하려는 데이터가 leaf 노드의 데이터일 때
        <ol>
          <li>부모의 자식 레퍼런스를 None으로 변경</li>
        </ol>
      </li>
      <li>경우 2: 삭제하려는 데이터 노드가 하나의 자식 노드만 있을 때
        <ol>
          <li>부모의 자식 레퍼런스를 자식 노드로 변경</li>
          <li>자식 노드의 부모 레퍼런스를 부모 노드로 변경</li>
        </ol>
      </li>
      <li>
        <p>경우 3: 삭제하려는 데이터 노드가 두 개의 자식이 있을 때</p>

        <ul>
          <li>successor: 어떤 노드보다 큰 모든 노드 중 가장 작은 노드
            <ul>
              <li>그 노드의 데이터값의 바로 다음으로 큰 값</li>
              <li>지우려는 노드의 오른쪽 자식을 루트로 하는 부분 트리(오른쪽 부분 트리)에서 가장 작은 데이터 노드(가장 왼쪽 아래에 있는 노드)</li>
              <li>이 노드는 왼쪽 부분 트리에 있는 모든 데이터보다 크다.</li>
              <li>따라서 이 노드는 이진 탐색 트리 속성을 어기지 않고 삭제하려는 노드를 대체할 수 있음.</li>
            </ul>
          </li>
        </ul>

        <ol>
          <li>successor 노드 탐색(<code class="language-plaintext highlighter-rouge">find_min(right_child)</code>)</li>
          <li>successor 노드의 데이터를 지우려는 노드의 데이터에 저장(노드 자체를 대체 X, 데이터만 대체)</li>
          <li>successor 노드를 삭제
            <ul>
              <li>지우려는 successor 노드는 왼쪽 자식이 있을 수 없음</li>
            </ul>
          </li>
        </ol>
      </li>
    </ol>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="nb">staticmethod</span>
<span class="k">def</span> <span class="nf">find_min</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="s">"""(부분)이진 탐색 트리의 가장 작은 노드 리턴"""</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span>  <span class="c1"># 탐색 변수. 파라미터 node로 초기화
</span>
    <span class="c1"># temp가 node를 뿌리로 갖는 부분 트리에서 가장 작은 노드일 때까지 왼쪽 자식 노드로 간다
</span>    <span class="k">while</span> <span class="n">temp</span><span class="p">.</span><span class="n">left_child</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">.</span><span class="n">left_child</span>

    <span class="k">return</span> <span class="n">temp</span>

<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="s">"""이진 탐색 트리 삭제 메소드"""</span>
    <span class="n">node_to_delete</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>  <span class="c1"># 삭제할 노드를 가지고 온다
</span>    <span class="n">parent_node</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">parent</span>  <span class="c1"># 삭제할 노드의 부모 노드
</span>
    <span class="c1"># 경우 1: 지우려는 노드가 leaf 노드일 때
</span>    <span class="k">if</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="ow">is</span> <span class="n">node_to_delete</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># 일반적인 경우
</span>            <span class="k">if</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span><span class="p">:</span>
                <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">parent_node</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1"># 경우 2: 지우려는 노드가 자식이 하나인 노드일 때:
</span>    <span class="k">elif</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># 지우려는 노드가 오른쪽 자식만 있을 때:
</span>        <span class="c1"># 지우려는 노드가 root 노드일 때
</span>        <span class="k">if</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">root</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="c1"># 지우려는 노드가 부모의 왼쪽 자식일 때
</span>        <span class="k">elif</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span><span class="p">:</span>
            <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span>
            <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent_node</span>
        <span class="c1"># 지우려는 노드가 부모의 오른쪽 자식일 때
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">parent_node</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span>
            <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent_node</span>

    <span class="k">elif</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># 지우려는 노드가 왼쪽 자식만 있을 때:
</span>        <span class="c1"># 지우려는 노드가 root 노드일 때
</span>        <span class="k">if</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">root</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="c1"># 지우려는 노드가 부모의 왼쪽 자식일 때
</span>        <span class="k">elif</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span><span class="p">:</span>
            <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span>
            <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent_node</span>
        <span class="c1"># 지우려는 노드가 부모의 오른쪽 자식일 때
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">parent_node</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span>
            <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent_node</span>

    <span class="c1"># 경우 3: 지우려는 노드가 2개의 자식이 있을 때
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">successor</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">find_min</span><span class="p">(</span><span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span><span class="p">)</span>  <span class="c1"># 삭제하려는 노드의 successor 노드 받아오기
</span>
        <span class="n">node_to_delete</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">successor</span><span class="p">.</span><span class="n">data</span>  <span class="c1"># 삭제하려는 노드의 데이터에 successor의 데이터 저장
</span>
        <span class="c1"># successor 노드 트리에서 삭제
</span>        <span class="k">if</span> <span class="n">successor</span> <span class="ow">is</span> <span class="n">successor</span><span class="p">.</span><span class="n">parent</span><span class="p">.</span><span class="n">left_child</span><span class="p">:</span>  <span class="c1"># successor 노드가 왼쪽 자식일 때
</span>            <span class="n">successor</span><span class="p">.</span><span class="n">parent</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">successor</span><span class="p">.</span><span class="n">right_child</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># successor 노드가 오른쪽 자식일 때
</span>            <span class="n">successor</span><span class="p">.</span><span class="n">parent</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">successor</span><span class="p">.</span><span class="n">right_child</span>

        <span class="k">if</span> <span class="n">successor</span><span class="p">.</span><span class="n">right_child</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># successor 노드가 오른쪽 자식이 있을 떄
</span>            <span class="n">successor</span><span class="p">.</span><span class="n">right_child</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">successor</span><span class="p">.</span><span class="n">parent</span>
</code></pre></div>    </div>

    <details>
<summary> 내가 구현한 방식 </summary>
<div>
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="nb">staticmethod</span>
<span class="k">def</span> <span class="nf">find_min</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="s">"""(부분)이진 탐색 트리의 가장 작은 노드 리턴"""</span>
    <span class="k">while</span> <span class="n">node</span><span class="p">.</span><span class="n">left_child</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">left_child</span>
    <span class="k">return</span> <span class="n">node</span>

<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
<span class="s">"""이진 탐색 트리 삭제 메소드"""</span>
<span class="n">node_to_delete</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="c1"># 삭제할 노드를 가지고 온다
</span><span class="n">parent_node</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">parent</span> <span class="c1"># 삭제할 노드의 부모 노드
</span>
    <span class="c1"># 경우 1: 지우려는 노드가 leaf 노드일 때
</span>    <span class="k">if</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span> <span class="o">==</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">==</span> <span class="n">node_to_delete</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span> <span class="o">==</span> <span class="n">node_to_delete</span><span class="p">:</span>
                <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">elif</span> <span class="n">parent_node</span><span class="p">.</span><span class="n">right_child</span> <span class="o">==</span> <span class="n">node_to_delete</span><span class="p">:</span>
                <span class="n">parent_node</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1"># 경우 2: 지우려는 노드가 자식이 하나인 노드일 때:
</span>    <span class="k">elif</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span> <span class="o">==</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">child_node</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">left_child</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">child_node</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span>

        <span class="k">if</span> <span class="n">parent_node</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">child_node</span>
        <span class="k">elif</span> <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span> <span class="o">==</span> <span class="n">node_to_delete</span><span class="p">:</span>
            <span class="n">parent_node</span><span class="p">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">child_node</span>
            <span class="n">child_node</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent_node</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">parent_node</span><span class="p">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">child_node</span>
            <span class="n">child_node</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent_node</span>

    <span class="c1"># 경우 3: 지우려는 노드가 2개의 자식이 있을 때
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">successor_data</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">find_min</span><span class="p">(</span><span class="n">node_to_delete</span><span class="p">.</span><span class="n">right_child</span><span class="p">).</span><span class="n">data</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">successor_data</span><span class="p">)</span>
        <span class="n">node_to_delete</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">successor_data</span>

</code></pre></div>        </div>
      </div>
</details>

    <ul>
      <li>
        <p>시간 복잡도: <span style="color: red"> $O(h)$ </span> ($h$는 트리 높이)</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center"> </th>
              <th style="text-align: center">탐색</th>
              <th style="text-align: center">탐색 후 단계들</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">경우1</td>
              <td style="text-align: center">$O(h)$</td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">경우2</td>
              <td style="text-align: center">$O(h)$</td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">경우3</td>
              <td style="text-align: center">$O(h)$</td>
              <td style="text-align: center">$O(h)$</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>

    <p>```</p>
  </li>
  <li>
    <p>이진 탐색 트리 높이</p>

    <ul>
      <li>
        <p>이진 탐색 트리 연산 시간은 높이에 비례</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">최악의 경우</th>
              <th style="text-align: center">평균의 경우</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">모든 노드의 자식 노드가 한쪽만 있는 경우<br />⇒ 트리가 한쪽으로 편향됐다 또는 치우쳤다.</td>
              <td style="text-align: center">root 노드를 기준으로 트리의 왼쪽과 오른쪽이 균형<br />⇒ 트리가 균형이 잡혔다.</td>
            </tr>
            <tr>
              <td style="text-align: center"><img src="/assets/images/자료구조/img6.png" alt="이진 탐색 트리 높이 최악의 경우" /></td>
              <td style="text-align: center"><img src="/assets/images/자료구조/img7.png" alt="이진 탐색 트리 높이 평균의 경우" /></td>
            </tr>
            <tr>
              <td style="text-align: center">$h=n$</td>
              <td style="text-align: center">$h=\log n$</td>
            </tr>
            <tr>
              <td style="text-align: center">편향된 트리일수록 연산들이 비효율적으로</td>
              <td style="text-align: center">균형이 잡힌 트리일수록 연산들이 효율적으로</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>이진 탐색 트리 연산 시간</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">이진 탐색 트리 연산</th>
              <th style="text-align: center">시간 복잡도</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">삽입</td>
              <td style="text-align: center"><span style="color: red">$O(h)$</span><br />(평균 $O(\log n)$, 최악 $O(n)$)</td>
            </tr>
            <tr>
              <td style="text-align: center">탐색</td>
              <td style="text-align: center"><span style="color: red">$O(h)$</span><br />(평균 $O(\log n)$, 최악 $O(n)$)</td>
            </tr>
            <tr>
              <td style="text-align: center">삭제</td>
              <td style="text-align: center"><span style="color: red">$O(h)$</span><br />(평균 $O(\log n)$, 최악 $O(n)$)</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
  <li>
    <p>이진 탐색 트리로 <code class="language-plaintext highlighter-rouge">dict</code> 구현하기</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Node</code>클래스에서 <code class="language-plaintext highlighter-rouge">data</code>대신 <code class="language-plaintext highlighter-rouge">key</code>와 <code class="language-plaintext highlighter-rouge">value</code>를 사용</li>
      <li>연산을 <code class="language-plaintext highlighter-rouge">data</code>가 아닌 <code class="language-plaintext highlighter-rouge">key</code>를 사용</li>
      <li>시간 복잡도는 이진 탐색 트리 연산 시간과 동일
        <ul>
          <li>cf. 연산 효율성은 해시 테이블이 더 좋음(시간 복잡도가 평균적으로 더 낮다.)</li>
        </ul>
      </li>
      <li>이진 탐색 트리는 순서를 저장해주는 자료 구조이므로(in-order 순회 이용) key를 정렬된 상태에서 빠르게 사용하고 싶을 때 이진 탐색 트리를 사용
        <ul>
          <li>cf. 해시 테이블은 데이터 사이에 순서 관계를 저장할 수 없으므로 데이터를 정렬할 때 순서를 저장하는 다른 자료 구조에 똑같은 데이터를 저장한 뒤에 다시 정렬해야 함</li>
        </ul>
      </li>
      <li>파이썬의 <code class="language-plaintext highlighter-rouge">set</code>, <code class="language-plaintext highlighter-rouge">dict</code>는 데이터 사이에 순서 관계를 약속하지 않는 추상 자료형이므로 <strong>해시 테이블</strong> 사용</li>
    </ul>
  </li>
</ul>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Computer Science" /><category term="Data Structure" /><summary type="html"><![CDATA[트리란?]]></summary></entry><entry><title type="html">기본 자료 구조들</title><link href="http://localhost:4000/coding/computer%20science/data%20structure/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B01/" rel="alternate" type="text/html" title="기본 자료 구조들" /><published>2023-03-16T00:00:00+09:00</published><updated>2023-03-17T02:12:00+09:00</updated><id>http://localhost:4000/coding/computer%20science/data%20structure/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B01</id><content type="html" xml:base="http://localhost:4000/coding/computer%20science/data%20structure/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B01/"><![CDATA[<h2 id="자료-구조란">자료 구조란?</h2>

<ul>
  <li>자료 구조: 데이터의 효율적인 접근 및 조작을 가능하게 하는 저장 및 관리 방식</li>
</ul>

<h2 id="컴퓨터가-데이터를-저장하는-방법">컴퓨터가 데이터를 저장하는 방법</h2>

<ul>
  <li>데이터가 저장하는 곳
    <ul>
      <li>스토리지(Storage): 데이터가 영구적으로 저장되는 곳
        <ul>
          <li>데이터를 저장하는 데 오래 걸린다.</li>
          <li>데이터를 받아오는 데 오래 걸린다.</li>
        </ul>
      </li>
      <li>메모리(Memory): 데이터가 임시로 저장되는 곳 ⇒ 메모리
        <ul>
          <li>데이터를 저장하는 데 빠르다.</li>
          <li>데이터를 받아오는 데 빠르다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>메모리
    <ul>
      <li>일정한 칸으로 나누어져 있다.</li>
      <li>각 칸에 데이터를 저장할 수 있다.</li>
      <li>각 칸에는 자신만의 주소가 있다.</li>
    </ul>
  </li>
  <li>RAM(Random Access Memory): 임의 접근 메모리
    <ul>
      <li>임의 접근: 접근 위치를 알면 접근할 때 항상 일정한 시간이 걸림</li>
      <li>메모리에 저장한 데이터 접근 시간 복잡도: $O(1)$</li>
      <li>cf. 순차 접근: 저장된 위치까지 가는데 한 단계씩 거쳐야 함. 임의 접근이 순차 접근보다 효율적이다!</li>
    </ul>
  </li>
  <li>자료 구조
    <ul>
      <li>메모리에 데이터를 저장한다.</li>
      <li>메모리에 저장된 데이터를 찾는다.</li>
      <li>→ 임의 접근으로 하고 있다: $O(1)$</li>
    </ul>
  </li>
  <li>메모리 한 칸이 저장할 수 있는 가장 기본적인 용량의 단위: 바이트(byte)</li>
  <li>레퍼런스(Reference)
    <ul>
      <li>데이터에 접근할 수 있게 해주는 값</li>
      <li>“주소”보다 조금 더 포괄적, 추상적인 표현</li>
      <li>자료 구조를 배울 때는 “주소=레퍼런스”라고 생각해도 됨</li>
      <li>실제로 변수를 사용할 때는 저장된 값을 알아서 받아옴</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">id</code>함수: 데이터의 메모리 주소를 정수로 표현한 값을 출력
    <ul>
      <li>Aliasing: 여러 변수가 같은 메모리를 가리키는 것
<code class="language-plaintext highlighter-rouge">list2 = list1</code></li>
    </ul>
  </li>
</ul>

<h2 id="배열">배열</h2>

<ul>
  <li>C 배열
    <ul>
      <li>크기가 고정되어 있다.</li>
      <li>같은 타입의 데이터만 담을 수 있다.</li>
      <li>데이터가 메모리에 연속적으로 저장</li>
    </ul>
  </li>
  <li>파이썬 리스트
    <ul>
      <li>각 데이터의 레퍼런스를 저장. 각각의 레퍼런스는 각 데이터를 갖게 됨. ⇒ 다양한 타입 저장 가능</li>
      <li>데이터 메모리에 항상 연속적으로 저장 X</li>
    </ul>
  </li>
</ul>

<h3 id="배열-1">배열</h3>

<ul>
  <li>배열의 요소들이 메모리에 순서대로, 그리고 연속적으로 저장</li>
  <li>인덱스 주소: 시작 주소 + 데이터 크기 × 인덱스</li>
  <li>배열 인덱스 접근: 주소를 알면 $O(1)$으로 접근 가능(임의 접근)</li>
  <li>배열 탐색: 선형 탐색 시간 복잡도 $O(n)$</li>
  <li>배열의 종류
    <ul>
      <li>정적 배열: 크기 고정(요소 수 제한) ⇒ 보통 배열이라 칭함
        <ul>
          <li>부족하게 잡으면: 더 넣을 공간 부족</li>
          <li>넉넉하게 잡으면: 공간 낭비</li>
        </ul>
      </li>
      <li>동적 배열(Dynamic Array): 크기 변함(요소 계속 추가 가능)
        <ul>
          <li>정적 배열로 만들어진 자료 구조</li>
          <li>정적 배열의 크기를 상황에 맞게 조절</li>
          <li>파이썬 등 동적 배열을 자료형으로 제공하는 대부분의 언어는 실제 사용하는 배열의 크기와 상관없이 저장해놓은 공간만 사용할 수 있게 처리되어 있음(index를 넘어서는 값에 접근하면 error가 나도록 의도적으로 처리)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>추가 연산(append operation)</strong></p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">정적 배열 남는 공간 있을 때</th>
          <th style="text-align: center">정적 배열이 꽉 찼을 때</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">자주 발생</td>
          <td style="text-align: center">가끔 발생</td>
        </tr>
        <tr>
          <td style="text-align: center">$O(1)$</td>
          <td style="text-align: center">$O(n)$</td>
        </tr>
        <tr>
          <td style="text-align: center">-</td>
          <td style="text-align: center">1. 2배로 큰 메모리를 새로 예약 <br /> 2. 본래 가지고 있는 데이터를 복사($O(n)$) <br /> 3. 새 데이터 추가</td>
        </tr>
      </tbody>
    </table>

    <p>※ 분할 상환 분석(Amortized Analysis)</p>

    <ul>
      <li>같은 동작을 $n$번 했을 때 드는 시간이 $X$일 때 동작을 한 번 하는데 걸린 시간: $\frac{X}{n}$</li>
    </ul>

    <ol>
      <li>새로운 데이터를 동적 배열 맨 끝에 단순히 저장하는 데 걸리는 시간 <br />
⇒ 인덱스에 데이터를 저장하는 데 걸리는 시간 1 → 이 행동을 $n$번 → $O(n)$</li>
      <li>더 큰 배열을 만들고 그 배열에 기존의 데이터를 옮기는 데 걸리는 시간 <br />
⇒ 추가 연산을 $n$번 했을 때, 가장 마지막에 데이터를 $m$개 옮겼다고 가정 → $m + \frac{m}{2} + \frac{m}{4} + \cdots + 1 = 2m - 1 (m &lt; n)$ <br />
⇒ 연속으로 추가 연산을 $n$번 하면 데이터를 옮겨서 저장하는 데 걸리는 총 시간은 $2n$보다 작다.</li>
      <li>1과 2에 의해 총 드는 시간은 $3n$보다 적은 시간
⇒ $\therefore O(3n) = O(n)$</li>
      <li>연속으로 $n$번 수행하는 작업이므로 분할 상환 분석에 의하여 $\frac{O(n)}{n} = O(1)$</li>
      <li>따라서, 동적 배열의 추가(append) 연산은 최악의 경우 <span style="color: red"> $O(n)$ </span> 이고, 분할 상환 분석을 하면 <span style="color: red"> $O(1)$ </span>이다.</li>
    </ol>

    <ul>
      <li>최악의 경우보다 분할 상환 분석을 한 시간 복잡도가 더 적으면 분할 상환 분석을 한 시간 복잡도를 사용</li>
    </ul>
  </li>
  <li>
    <p><strong>삽입 연산(insert operation)</strong>(동적 배열)</p>

    <ul>
      <li>배열의 임의의 공간에 투입</li>
    </ul>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">정적 배열 남는 공간 있을 때</th>
          <th style="text-align: center">정적 배열이 꽉 찼을 때</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">최악의 상황은 가장 처음에 삽입</td>
          <td style="text-align: center">복사 + 자리 생성</td>
        </tr>
        <tr>
          <td style="text-align: center">$O(n+1) = O(n)$</td>
          <td style="text-align: center">$O(2n+1)=O(n)$</td>
        </tr>
      </tbody>
    </table>

    <ul>
      <li>삽입 연산 시간 복잡도: <span style="color: red"> $O(n)$ </span></li>
    </ul>
  </li>
  <li>
    <p><strong>삭제 연산</strong>(동적 배열)</p>

    <ul>
      <li>최악의 경우: 맨 앞 데이터를 지울 때 $O(n)$ → 이런 상황이 잦으면 동적 배열은 비효율적</li>
      <li>맨 뒤 데이터를 지울 때 $O(1)$</li>
      <li>동적 배열 크기 줄이기
        <ol>
          <li>특정 비율 이하로 떨어지면 새로운 내부 배열을 정의</li>
          <li>기존의 요소를 새로 만든 내부 배열에 옮겨서 저장
            <ul>
              <li>동적 배열 맨 끝에 데이터 삭제 시간 복잡도
                <ul>
                  <li>최악의 경우: 새 배열 복사 ⇒ <span style="color: red"> $O(n)$ </span></li>
                  <li>분할 상환 분석: 대부분 $O(1)$, 드물게 $O(n)$ ⇒ <span style="color: red"> $O(1)$ </span></li>
                </ul>
              </li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>(정리)</strong> 배열 vs 동적 배열</p>

    <ul>
      <li>
        <p>시간 복잡도</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center"> </th>
              <th style="text-align: center">배열</th>
              <th style="text-align: center">동적 배열</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">접근(access)</td>
              <td style="text-align: center">$O(1)$</td>
              <td style="text-align: center">$O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">탐색(search)</td>
              <td style="text-align: center">$O(n)$</td>
              <td style="text-align: center">$O(n)$</td>
            </tr>
            <tr>
              <td style="text-align: center">삽입(insert)</td>
              <td style="text-align: center">불가</td>
              <td style="text-align: center">$O(n)$<br /> 맨뒤 $O(1)$</td>
            </tr>
            <tr>
              <td style="text-align: center">삭제(delete)</td>
              <td style="text-align: center">불가</td>
              <td style="text-align: center">$O(n)$<br /> 맨뒤 $O(1)$</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>낭비 공간</p>
        <ul>
          <li>배열: 크기가 고정되어 있기 때문에 낭비하는 공간이 없다.</li>
          <li>동적 배열: 공간을 낭비할 수도 있고 안 할 수도 있다.
            <ul>
              <li>최악의 경우 → 새로운 배열을 만들었을 때 $O(n-2)$</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="링크드-리스트linked-list">링크드 리스트(Linked List)</h2>

<h3 id="싱글리-링크드-리스트">(싱글리) 링크드 리스트</h3>

<ul>
  <li>데이터를 순서대로 저장한다.</li>
  <li>요소를 계속 추가할 수 있다.</li>
  <li>
    <p>노드(Node)들을 단위로 하여 데이터를 저장, 노드들을 순서대로 연결</p>

    <ul>
      <li>각 노드는 데이터와 다음에 올 노드를 저장</li>
      <li>마지막 노드는 다음의 노드를 비워둠</li>
    </ul>

    <p><img src="/assets/images/자료구조/img1.png" alt="싱글리 링크드 리스트" /></p>

    <ul>
      <li>노드(Node) 객체
        <ul>
          <li><code class="language-plaintext highlighter-rouge">data</code>: 저장할 데이터</li>
          <li><code class="language-plaintext highlighter-rouge">next</code>: 다음 노드의 레퍼런스</li>
          <li>시작 노드: head 노드</li>
          <li>마지막 노드: tail 노드</li>
        </ul>
      </li>
      <li>노드들은 연속적이지 않고 메모리에 흩어져있다.</li>
    </ul>
  </li>
  <li>
    <p><strong>링크드 리스트 접근 연산</strong></p>

    <ul>
      <li>특정 위치에 있는 노드를 리턴하는 연산</li>
      <li>링크드 리스트 접근 시간 복잡도
        <ul>
          <li>인덱스 x에 있는 노드에 접근하려면 head에서 다음 노드로 x번 가면 됨!</li>
          <li>마지막 노드에 접그나려면 head에서 다음 노드로 $n-1$번 가야 됨
⇒ 접근 연산 시간 복잡도: <span style="color: red"> $O(n)$ </span></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>링크드 리스트 탐색 연산</strong></p>

    <ul>
      <li>가장 앞 노드부터 다음 노드를 하나씩 보면서 원하는 데이터를 찾는다(선형 탐색)</li>
      <li>찾으려는 데이터가 마지막 노드에 있는 최악의 경우 <span style="color: red"> $O(n)$ </span></li>
    </ul>
  </li>
  <li>
    <p><strong>링크드 리스트 삽입/삭제 연산</strong></p>

    <ul>
      <li>삽입/삭제할 인덱스의 주변 노드들에 연결된 레퍼런스만 수정 ⇒ $O(1)$</li>
      <li>그러나 삽입/삭제 전 <code class="language-plaintext highlighter-rouge">previous_node</code>를 먼저 찾아야 하므로 이를 탐색/접근 연산으로 찾아야 함 ⇒ <span style="color: red"> $O(n+1) = O(n)$ </span></li>
      <li>
        <p>삽입/삭제 연산 특수 경우 시간 복잡도</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center"> </th>
              <th style="text-align: center">head 노드</th>
              <th style="text-align: center">tail 노드</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">삽입</td>
              <td style="text-align: center"><span style="color: red"> $O(1)$ </span></td>
              <td style="text-align: center"><span style="color: red"> $O(1)$ </span></td>
            </tr>
            <tr>
              <td style="text-align: center">삭제</td>
              <td style="text-align: center"><span style="color: red"> $O(1)$ </span></td>
              <td style="text-align: center"><span style="color: red"> $O(n)$ </span><br />(바로 전 노드가 필요)</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">code</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
  <span class="s">"""링크드 리스트의 노드 클래스"""</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>  <span class="c1"># 실제 노드가 저장하는 데이터
</span>    <span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 다음 노드에 대한 레퍼런스
</span>

<span class="k">class</span> <span class="nc">LinkedList</span><span class="p">:</span>
  <span class="s">"""링크드 리스트 클래스"""</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 링크드 리스트의 가장 앞 노드
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 링크드 리스트의 가장 뒤 노드
</span>
  <span class="k">def</span> <span class="nf">pop_left</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="s">"""링크드 리스트의 가장 앞 노드 삭제 메소드. 단, 링크드 리스트에 항상 노드가 있다고 가정한다"""</span>
    <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">data</span> <span class="c1"># 삭제할 노드를 미리 저장해놓는다
</span>
    <span class="c1"># 지우려는 데이터가 링크드 리스트의 마지막 남은 데이터일 때
</span>    <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>

    <span class="k">return</span> <span class="n">data</span> <span class="c1">#삭제된 노드의 데이터를 리턴한다
</span>
  <span class="k">def</span> <span class="nf">prepend</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="s">"""링크드 리스트의 가장 앞에 데이터 삽입"""</span>
    <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="c1"># 새로운 노드를 만든다
</span>
    <span class="c1"># 링크드 리스트가 비었는지 확인
</span>    <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="n">new_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>  <span class="c1"># 리스트의 head_node를 새롭게 삽입한 노드로 정해준다.
</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">new_node</span>  <span class="c1"># 리스트의 head_node를 새롭게 삽입한 노드로 정해준다.
</span>
  <span class="k">def</span> <span class="nf">delete_after</span><span class="p">(</span><span class="n">slef</span><span class="p">,</span> <span class="n">previous_node</span><span class="p">):</span>
    <span class="s">"""링크드 리스트 삭제연산, 주어진 노드 뒤 노드를 삭제한다"""</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">data</span>

    <span class="c1"># 지우려는 노드가 tail 노드일 때
</span>    <span class="k">if</span> <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
      <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">previous_node</span>
    <span class="c1"># 두 노드 사이 노드를 지울 때
</span>    <span class="k">else</span><span class="p">:</span>
      <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span>

    <span class="k">return</span> <span class="n">data</span>

  <span class="k">def</span> <span class="nf">insert_after</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">previous_node</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="s">"""링크드 리스트 주어진 노드 뒤 삽입 연산 메소드"""</span>
    <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="c1"># 가장 마지막 순서 삽입
</span>    <span class="k">if</span> <span class="n">previous_node</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>
    <span class="k">else</span><span class="p">:</span> <span class="c1"># 두 노드 사이에 삽입
</span>      <span class="n">new_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span>
      <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>

  <span class="k">def</span> <span class="nf">find_node_at</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
    <span class="s">"""링크드 리스트 접근 연산 메소드. 파라미터 인덱스는 항상 있다고 가정"""</span>
    <span class="n">iterator</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>

    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
      <span class="n">iterator</span> <span class="o">=</span> <span class="n">iterator</span><span class="p">.</span><span class="nb">next</span>

    <span class="k">return</span> <span class="n">iterator</span>

  <span class="k">def</span> <span class="nf">append</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="s">"""링크드 리스트 추가 연산 메소드"""</span>
    <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">new_node</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="s">"""링크드 리스트를 문자열로 표현해서 리턴하는 메소드"""</span>
      <span class="n">res_str</span> <span class="o">=</span> <span class="s">"|"</span>

      <span class="c1"># 링크드 리스트 안에 모든 노드를 돌기 위한 변수. 일장 가장 앞 노드로 정의한다.
</span>      <span class="n">iterator</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>

      <span class="c1"># 링크드 리스트 끝까지 돈다
</span>      <span class="k">while</span> <span class="n">iterator</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># 각 노드의 데이터를 리턴하는 문자열에 더해준다
</span>        <span class="n">res_str</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">" </span><span class="si">{</span><span class="n">iterator</span><span class="p">.</span><span class="n">data</span><span class="si">}</span><span class="s"> |"</span>
        <span class="n">iterator</span> <span class="o">=</span> <span class="n">iterator</span><span class="p">.</span><span class="nb">next</span>  <span class="c1"># 다음 노드로 넘어간다
</span>
      <span class="k">return</span> <span class="n">res_str</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="더블리-링크드-리스트">더블리 링크드 리스트</h3>

<ul>
  <li>더블리 링크드 리스트 노드: <code class="language-plaintext highlighter-rouge">data</code>, <code class="language-plaintext highlighter-rouge">next</code>, <code class="language-plaintext highlighter-rouge">prev</code></li>
  <li>더블리 링크드 리스트 연산 &amp; 시간 복잡도</li>
  <li><strong>접근 &amp; 탐색 연산</strong>: 싱글리 링크드 리스트 접근 &amp; 탐색과 동일 ⇒ <span style="color: red"> $O(n)$ </span></li>
  <li>
    <p><strong>삽입 &amp; 삭제 연산</strong></p>

    <ul>
      <li>삽입/삭제할 인덱스의 주변 노드들에 연결된 레퍼런스만 수정 ⇒ $O(1)$</li>
      <li>그러나 삽입/삭제 전 <code class="language-plaintext highlighter-rouge">previous_node</code>를 먼저 찾아야 하므로 이를 탐색/접근 연산으로 찾아야 함 ⇒ <span style="color: red"> $O(n+1) = O(n)$ </span></li>
      <li>
        <p>삽입/삭제 연산 특수 경우 시간 복잡도</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center"> </th>
              <th style="text-align: center">head 노드</th>
              <th style="text-align: center">tail 노드</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">삽입</td>
              <td style="text-align: center"><span style="color: red"> $O(1)$ </span></td>
              <td style="text-align: center"><span style="color: red"> $O(1)$ </span></td>
            </tr>
            <tr>
              <td style="text-align: center">삭제</td>
              <td style="text-align: center"><span style="color: red"> $O(1)$ </span></td>
              <td style="text-align: center"><span style="color: blue"> $O(1)$ </span></td>
            </tr>
          </tbody>
        </table>

        <ul>
          <li>tail 노드를 많이 삭제해야 된다면 싱글리 링크드 리스트보다 더블리 링크드 리스트를 사용하는 게 더 효율적</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">code</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
  <span class="s">"""링크드 리스트의 노드 클래스"""</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>  <span class="c1"># 노드가 저장하는 데이터
</span>    <span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 다음 노드에 대한 레퍼런스
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 이전 노드에 대한 레퍼런스
</span>
<span class="k">class</span> <span class="nc">LinkedList</span><span class="p">:</span>
  <span class="s">"""링크드 리스트 클래스"""</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>

  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node_to_delete</span><span class="p">):</span>
    <span class="s">"""더블리 링크드 리스트 삭제 연산 메소드"""</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">data</span>

    <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">elif</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="nb">next</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">elif</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">prev</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="n">node_to_delete</span><span class="p">.</span><span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="nb">next</span>
      <span class="n">node_to_delete</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">prev</span>

    <span class="k">return</span> <span class="n">data</span>

  <span class="k">def</span> <span class="nf">insert_after</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">previous_node</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="s">"""링크드 리스트 추가 연산 메소드"""</span>
    <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="c1"># 가장 마지막 순서 삽입
</span>    <span class="k">if</span> <span class="n">previous_node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>
      <span class="n">new_node</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>
    <span class="k">else</span><span class="p">:</span> <span class="c1"># 두 노드 사이에 삽입
</span>      <span class="n">new_node</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">previous_node</span>
      <span class="n">new_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span>
      <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>
      <span class="n">new_node</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">new_node</span>

  <span class="k">def</span> <span class="nf">find_node_at</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
    <span class="s">"""링크드 리스트 접근 연산 메소드. 파라미터 인덱스는 항상 있다고 가정"""</span>
    <span class="n">iterator</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>

    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
      <span class="n">iterator</span> <span class="o">=</span> <span class="n">iterator</span><span class="p">.</span><span class="nb">next</span>

    <span class="k">return</span> <span class="n">iterator</span>

  <span class="k">def</span> <span class="nf">append</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="s">"""링크드 리스트 추가 연산 메소드"""</span>
    <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="c1"># 새로운 데이터를 저장하는 노드
</span>
    <span class="c1"># 링크드 리스트가 비어 있는 경우
</span>    <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">new_node</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>
    <span class="k">else</span><span class="p">:</span> <span class="c1"># 링크드 리스트에 데이터가 이미 있는 경우
</span>      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>
      <span class="n">new_node</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>

  <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="s">"""링크드 리스트를 문자열로 표현해서 리턴하는 메소드"""</span>
    <span class="n">res_str</span> <span class="o">=</span> <span class="s">"|"</span>

    <span class="c1"># 링크드 리스트 안에 모든 노드를 돌기 위한 변수. 일단 가장 앞 노드로 정의한다.
</span>    <span class="n">iterator</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>

    <span class="c1"># 링크드 리스트 끝까지 돈다
</span>    <span class="k">while</span> <span class="n">iterator</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
      <span class="c1"># 각 노드의 데이터를 리턴하는 문자열에 더해준다
</span>      <span class="n">res_str</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">" </span><span class="si">{</span><span class="n">iterator</span><span class="p">.</span><span class="n">data</span><span class="si">}</span><span class="s"> |"</span>
      <span class="n">iterator</span> <span class="o">=</span> <span class="n">iterator</span><span class="p">.</span><span class="nb">next</span>  <span class="c1"># 다음 노드로 넘어간다
</span>
    <span class="k">return</span> <span class="n">res_str</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="싱글리-vs-더블리-링크드-리스트">싱글리 vs 더블리 링크드 리스트</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">싱글리 링크드 리스트</th>
      <th style="text-align: center">더블리 링크드 리스트</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">노드</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">next</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">next</code>, <code class="language-plaintext highlighter-rouge">prev</code></td>
    </tr>
    <tr>
      <td style="text-align: center">접근</td>
      <td style="text-align: center">특정 노드에서 앞에 있는 노드들에 접근할 수 있다.</td>
      <td style="text-align: center">어떤 노드던지 링크드 리스트 안 모든 노드에 접근할 수 있다.</td>
    </tr>
    <tr>
      <td style="text-align: center">추가적 공간</td>
      <td style="text-align: center">링크드 리스트 안에 레퍼런스 개수: $n-1$<br />$O(n)$</td>
      <td style="text-align: center">링크드 리스트 안에 레퍼런스 개수: $2n-2$<br />$O(n)$<br />싱글리 링크드 리스트의 두배</td>
    </tr>
  </tbody>
</table>

<h2 id="해시-테이블">해시 테이블</h2>

<ul>
  <li>key-value 데이터
    <ul>
      <li>하나의 key와 그 key에 해당하는 value를 합침</li>
      <li>하나의 key에는 하나의 value만 있어야 한다.</li>
      <li>배열 인덱스 접근: $O(1)$
        <ul>
          <li>인덱스를 key로 생각하고 데이터 저장</li>
          <li>key(인덱스)를 이용한 value 접근: $O(1)$ ⇒ Direct Access Table</li>
        </ul>
      </li>
      <li>낭비하는 공간이 많다. ⇒ key에 맞춰 메모리를 할당해야 하기 때문</li>
    </ul>
  </li>
</ul>

<h3 id="해시-테이블hash-table">해시 테이블(Hash Table)</h3>

<ul>
  <li>해시 함수: 특정 값을 원하는 범위의 자연수로 바꿔주는 함수
<img src="/assets/images/자료구조/img2.png" alt="해시 함수" />
    <ul>
      <li>해시 함수의 조건
        <ol>
          <li>한 해시 테이블의 해시 함수는 결정론적이어야 한다.
            <ul>
              <li>똑같은 key를 넣었을 때는 항상 똑같은 결과가 나와야 한다.</li>
            </ul>
          </li>
          <li>결과 해시값이 치우치지 않고 고르게 나온다.
            <ul>
              <li>입력값에 대한 출력값이 나올 확률이 비슷해야 한다.</li>
            </ul>
          </li>
          <li>빨리 계산할 수 있어야 한다.</li>
        </ol>
      </li>
      <li>직관적이면서 쉬운 방법
        <ol>
          <li>나눗셈의 나머지</li>
          <li>곱셈
a. $0 &lt; \alpha &lt; 1$인 아무 값 $\alpha$를 지정
b. $\alpha$에 key를 곱한 후, 소수 부분만 남김
c. 남은 소수 부분에 배열의 크기를 곱한 후, 정수 부분만 남김</li>
          <li><code class="language-plaintext highlighter-rouge">hash</code> 함수
a. 같은 값을 넣으면 항상 같은 정수를 리턴하고, 다른 값을 넣으면 항상 다른 정수를 리턴
b. 다른 타입의 데이터들을 자신만의 고유한 정수 값으로 변환해줌
            <ul>
              <li>불변 타입 자료형에만 사용 가능(불린, 정수, 소수, 튜플, 문자열)</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>해시 테이블 구현 방법
    <ol>
      <li>고정된 크기의 배열을 만든다.</li>
      <li>해시 함수를 이용해서 key를 원하는 범위의 자연수로 바꾼다.</li>
      <li>해시 함수 결과 값 인덱스에 key-value 쌍을 저장한다.</li>
    </ol>
  </li>
  <li>해시 테이블 충돌(Collision): 사용하고 있는 인덱스에 새로운 key-value쌍을 저장해야 하고 있는 경우
    <ul>
      <li>Chaining: 배열 인덱스에 링크드 리스트 저장해서 충돌 해결
        <ul>
          <li>링크드 리스트 노드에는 <code class="language-plaintext highlighter-rouge">key</code>, <code class="language-plaintext highlighter-rouge">value</code>, <code class="language-plaintext highlighter-rouge">next</code> 저장</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="해시-테이블-연산">해시 테이블 연산</h3>

<ul>
  <li>
    <p><strong>탐색(search)</strong></p>

    <ul>
      <li>원하는 key에 해당하는 value를 찾는 연산</li>
      <li>탐색 연산 시간 복잡도
        <ol>
          <li>해시 함수 계산: $O(1)$</li>
          <li>배열 인덱스 접근: $O(1)$</li>
          <li>링크드 리스트 탐색: 링크드 리스트 길이 $m$일 때 $O(m)$
            <ul>
              <li>최악의 경우: $n$개의 key-value 데이터 쌍이 모두 한 링크드 리스트에 저장된 경우: $O(n)$</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>

    <p>⇒ <span style="color: red"> $O(n)$ </span></p>
  </li>
  <li>
    <p><strong>삽입(save)</strong></p>

    <ul>
      <li>key-value 데이터 쌍을 저장 또는 수정
        <ul>
          <li>삽입하려는 key가 이미 있는지 확인
            <ol>
              <li>있으면 수정</li>
              <li>없으면 추가</li>
            </ol>
          </li>
        </ul>
      </li>
      <li>삽입 연산 시간 복잡도
        <ol>
          <li>해시 함수 계산: $O(1)$</li>
          <li>배열 인덱스 접근: $O(1)$</li>
          <li>링크드 리스트 탐색: $O(n)$</li>
          <li>링크드 리스트 저장/노드 수정: $O(1)$</li>
        </ol>
      </li>
    </ul>

    <p>⇒ <span style="color: red"> $O(n)$ </span></p>
  </li>
  <li>
    <p><strong>삭제(delete)</strong></p>

    <ul>
      <li>원하는 key에 대한 key-value 데이터 쌍을 삭제</li>
      <li>삭제 시간 복잡도
        <ol>
          <li>해시 함수 계산: $O(1)$</li>
          <li>배열 인덱스 접근: $O(1)$</li>
          <li>링크드 리스트 노드 탐색: $O(n)$</li>
          <li>링크드 리스트 노드 삭제: $O(1)$</li>
        </ol>
      </li>
    </ul>

    <p>⇒ <span style="color: red"> $O(n)$ </span></p>
  </li>
  <li>
    <p>평균 시간 복잡도를 이용한 해시 테이블 연산 시간 복잡도</p>

    <ul>
      <li>배열에 저장된 각 링크드 리스트 길이는 평균적으로 $\cfrac{n}{m}$
        <ul>
          <li>$m$: 해시 테이블이 사용하는 배열의 크기</li>
          <li>$n$: 해시 테이블에 총 들어가 있는 key-value 쌍의 수</li>
        </ul>
      </li>
      <li>따라서 시간 복잡도는 $O(\cfrac{n}{m})$</li>
      <li>해시 테이블을 만들 때 항상 충분히 여유롭게 총 저장하는 key-value 쌍 수와 해시 테이블이 사용하는 배열의 크기를 비슷하거나 작게 가정($m=n$) ⇒ $O(1)$</li>
      <li>따라서, 세 연산은 최악의 경우 $O(m)$, 평균 $O(1)$</li>
    </ul>
  </li>
</ul>

<h3 id="code"><code class="language-plaintext highlighter-rouge">code</code></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
  <span class="s">"""링크드 리스트의 노드 클래스"""</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
    <span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 다음 노드에 대한 레퍼런스
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 전 노드에 대한 레퍼런스
</span>
<span class="k">class</span> <span class="nc">LinkedList</span><span class="p">:</span>
  <span class="s">"""링크드 리스트 클래스"""</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 링크드 리스트의 가장 앞 노드
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 링크드 리스트의 가장 뒤 노드
</span>
  <span class="k">def</span> <span class="nf">find_node_with_key</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="s">"""링크드 리스트에서 주어진 데이터를 갖고있는 노드를 리턴한다. 단 해당 노드가 없으면 None을 리턴한다"""</span>
    <span class="n">iterator</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>  <span class="c1"># 링크드 리스트를 돌기 위해 필요한 노드 변수
</span>
    <span class="k">while</span> <span class="n">iterator</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">iterator</span><span class="p">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">iterator</span>

      <span class="n">iterator</span> <span class="o">=</span> <span class="n">iterator</span><span class="p">.</span><span class="nb">next</span>

    <span class="k">return</span> <span class="bp">None</span>

  <span class="k">def</span> <span class="nf">append</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="s">"""링크드 리스트 추가 연산 메소드"""</span>
    <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

    <span class="c1"># 빈 링크드 리스트라면 head와 tail을 새로 만든 노드로 지정
</span>    <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">new_node</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>
    <span class="c1"># 이미 노드가 있다면
</span>    <span class="k">else</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span> <span class="c1"># 마지막 노드의 다음 노드로 추가
</span>      <span class="n">new_node</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>  <span class="c1">#마지막 노드 업데이트
</span>
  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node_to_delete</span><span class="p">):</span>
    <span class="s">"""더블리 링크드 리스트 삭제 연산 메소드"""</span>

    <span class="c1"># 링크드 리스트에서 마지막 남은 데이터를 삭제할 때
</span>    <span class="k">if</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">and</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1"># 링크드 리스트 가장 앞 데이터 삭제할 때
</span>    <span class="k">elif</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1"># 링크드 리스트 가장 뒤 데이터 삭제할 때
</span>    <span class="k">elif</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">prev</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1"># 두 노드 사이에 있는 데이터 삭제할 때
</span>    <span class="k">else</span><span class="p">:</span>
      <span class="n">node_to_delete</span><span class="p">.</span><span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="nb">next</span>
      <span class="n">node_to_delete</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">to_delete</span><span class="p">.</span><span class="n">prev</span>

    <span class="k">return</span> <span class="n">node_to_delete</span><span class="p">.</span><span class="n">value</span>

  <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="s">"""링크드 리스트 문자열로 표현해서 리턴하는 메소드"""</span>
    <span class="n">res_str</span> <span class="o">=</span> <span class="s">""</span>

    <span class="c1"># 링크드 리스트 안에 모든 노드를 돌기 위한 변수. 일단 가장 앞 노드로 정의한다.
</span>    <span class="n">iterator</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>

    <span class="c1"># 링크드 리스트 끝까지 돈다
</span>    <span class="k">while</span> <span class="n">iterator</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
      <span class="c1"># 각 노드의 데이터를 리턴하는 문자열에 더해준다.
</span>      <span class="n">res_str</span> <span class="o">+=</span> <span class="s">"{}: {}</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">iterator</span><span class="p">.</span><span class="n">key</span><span class="p">,</span> <span class="n">iterator</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>
      <span class="n">iterator</span> <span class="o">=</span> <span class="n">iterator</span><span class="p">.</span><span class="nb">next</span>  <span class="c1"># 다음 노드로 넘어간다.
</span>
    <span class="k">return</span> <span class="n">res_str</span>

<span class="k">class</span> <span class="nc">HashTable</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">capacity</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">_capacity</span> <span class="o">=</span> <span class="n">capacity</span> <span class="c1"># 파이썬 리스트 수용 크기 저장
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">_table</span> <span class="o">=</span> <span class="p">[</span><span class="n">LinkedList</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_capacity</span><span class="p">)]</span> <span class="c1"># 파이썬 리스트에 각 링크드 리스트 저장
</span>
  <span class="k">def</span> <span class="nf">_hash_function</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="s">"""
      주어진 key에 나누기 방법을 사용해서 해시된 값을 리턴하는 메소드
      주의: key는 파이썬 불변 타입이어야 한다.
    """</span>
    <span class="k">return</span> <span class="nb">hash</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">_capacity</span>

  <span class="k">def</span> <span class="nf">_get_linked_list_for_key</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="s">"""주어진 key에 대응하는 인덱스에 저장된 링크드 리스트를 리턴하는 메소드"""</span>
    <span class="n">hashed_index</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_hash_function</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

    <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_table</span><span class="p">[</span><span class="n">hashed_index</span><span class="p">]</span>

  <span class="k">def</span> <span class="nf">_look_up_node</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="s">"""파라미터로 받은 key를 갖고 있는 노드를 리턴하는 메소드"""</span>
    <span class="n">linked_list</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_get_linked_list_for_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">linked_list</span><span class="p">.</span><span class="n">find_node_with_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">look_up_value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="s">"""주어진 key에 해당하는 데이터를 리턴하는 메소드"""</span>
    <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_look_up_node</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="n">value</span>

  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="s">"""
      새로운 key-value 쌍을 삽입시켜주는 메소드
      이미 해당 key에 저장된 데이터가 있으면 해당 key에 해당하는 데이터를 바꿔준다.
    """</span>
    <span class="n">existing_node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_look_up_node</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="c1"># 이미 저장된 key인지 확인한다.
</span>
    <span class="k">if</span> <span class="n">existing_node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
      <span class="n">existing_node</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span> <span class="c1"># 이미 저장된 key면 데이터만 바꿔주고
</span>    <span class="k">else</span><span class="p">:</span>
      <span class="c1"># 없는 key면 링크드 리스트에 새롭게 삽입시켜준다.
</span>      <span class="n">linked_list</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_get_linked_list_for_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">linked_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">delete_by_key</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="s">"""주어진 key에 해당하는 key-value 쌍을 삭제하는 메소드"""</span>
    <span class="n">node_to_delete</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">_look_up_node</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>  <span class="c1"># 이미 저장된 key인지 확인한다.
</span>
    <span class="c1"># 저장되어 있는 key면 삭제한다.
</span>    <span class="k">if</span> <span class="n">node_to_delete</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
      <span class="n">linked_list</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_get_linked_list_for_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">linked_list</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">node_to_delete</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="s">"""해시 테이블 문자열 메소드"""</span>
    <span class="n">res_str</span> <span class="o">=</span> <span class="s">""</span>

    <span class="k">for</span> <span class="n">linked_list</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">_table</span><span class="p">:</span>
      <span class="n">res_str</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="n">linked_list</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">res_str</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Open Addressing</p>

    <ul>
      <li>충돌이 발생했을 시 비어있는 다른 인덱스를 탐색</li>
      <li>탐색 방법
        <ol>
          <li>선형 탐사(Linear probing): 충돌이 일어났을 때, 빈 인덱스를 하나씩 순서대로 선형적으로 찾는 방법</li>
          <li>제곱 탐사(Quadratic Probing): 충돌이 일어났을 때, 빈 인덱스를 하나씩 순서대로 제곱의 숫자로 찾는 방법(10 → 11 → 15 → 24 → …)</li>
        </ol>
      </li>
      <li>탐색: 해시 함수를 통해 반환된 값의 메모리 위치를 확인하고, 선형탐사, 제곱탐사 등의 방법으로 찾아가기</li>
      <li>삭제: 탐색 후 찾으면 제거, 이때 탐색을 위해 DELETED를 표시</li>
      <li>삽입, 탐색, 삭제 최악의 경우: 탐색 시 배열이 꽉 찼을 때 ⇒ $O(n)$</li>
      <li>
        <p>평균 시간 복잡도</p>

        <ul>
          <li>load factor: $\alpha = \cfrac{n}{m}$
            <ul>
              <li>해시 테이블이 차있는 정도</li>
              <li>$n$: 해시 테이블 안에 있는 데이터 쌍 수</li>
              <li>$m$: 해시 테이블이 사용하는 배열의 크기</li>
            </ul>
          </li>
          <li>
            <p>Open addressing을 사용하는 해시 테이블에서 평균적으로 탐사를 해야 하는 횟수의 기댓값은 $\cfrac{1}{1-\alpha}$보다 작다.</p>

            <ul>
              <li>$\alpha = 0.9$: 평균적으로 10개 이하로 탐색 가능</li>
              <li>
                <p>$\alpha = 0.5$: 평균적으로 2개 이하로 탐색 가능</p>

                <details>
<summary> 증명 </summary>
<div style="background-color: #e9dcbe">

                    <p>$m$ 길이의 해시 테이블에서 현재 $n$개의 데이터 쌍이 들어가 있다고 하자. 빈 인덱스를 탐사할 때 $i$번 이상 탐사를 해야 할 확률을 $P_i$라고 하면, 즉 첫 번째 인덱스부터 $i-1$ 인덱스까지 임의로 확인했을 때 차있었을 확률은</p>

\[P_i = \cfrac{n}{m} \times \cfrac{n-1}{m-1} \times \cdots \times \cfrac{n-i+2}{m-i+2} &lt; {\left(\cfrac{n}{m}\right)}^{i-1} = {\alpha}^{i-1}\]

                    <p>따라서 빈 인덱스를 찾기 위해 탐색해야 할 횟수의 기댓값을 $E[X]$라 하면</p>

\[\begin{aligned}
E[X] &amp;= \sum\limits_{i=1}^{\infty} i \times P\{X=i\} \\
&amp;=\sum\limits_{i=0}^{\infty} i \left( P\{X \geq i\} - P\{X \geq i + 1\} \right) \\
&amp;=\sum\limits_{i=1}^{\infty} P\{X \geq i\} \\
&amp;=P_1 + P_2 + P_3 + \cdots \\
&amp;&lt;1 + \alpha + {\alpha}^2 + \cdots \\
&amp;&lt;\cfrac{1}{1-\alpha}
\end{aligned}\]

                  </div>
</details>
              </li>
            </ul>
          </li>
          <li>해시 테이블에서 항상 load factor가 0.9가 넘지 않게 약속하겠다고 약속 ⇒ 평균적으로 10개 이하로 탐색 가능 ⇒ $O(1)$</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="추상-자료형">추상 자료형</h2>

<ul>
  <li>기능과 구현
    <ul>
      <li>기능: 연산이 무엇을 하는지(e.g. 삽입 연산 기능: 순서 데이터에서 원하는 위치에 데이터 저장)</li>
      <li>구현: 기능을 어떻게 하는지</li>
    </ul>
  </li>
  <li>추상화: 구현은 몰라도 기능만 알면 사용할 수 있다.
    <ul>
      <li>추상 자료형: 자료 구조를 추상화한 것. 데이터를 저장/사용할 때 기능만 생각</li>
    </ul>
  </li>
  <li>
    <p>추상 자료형(Abstract Data Type)</p>

    <ul>
      <li>
        <p>e.g. 리스트</p>

        <ul>
          <li>데이터간 순서 관계를 유지할 수 있다.</li>
        </ul>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">연산</th>
              <th style="text-align: left">방법</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">접근</td>
              <td style="text-align: left">특정 위치에 있는 데이터를 가지고 오거나 수정한다.</td>
            </tr>
            <tr>
              <td style="text-align: center">탐색</td>
              <td style="text-align: left">특정 조건을 만족하는 데이터를 찾는다.</td>
            </tr>
            <tr>
              <td style="text-align: center">삽입</td>
              <td style="text-align: left">특정 위치에 새로운 데이터를 저장한다.</td>
            </tr>
            <tr>
              <td style="text-align: center">삭제</td>
              <td style="text-align: left">특정 위치에 있는 데이터를 지운다.</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>자료 구조와의 차이: 자료 구조는 구체적인 구현 방법을 보유</p>

        <ul>
          <li>
            <p>e.g. 동적 배열</p>

            <ul>
              <li>데이터를 메모리에 순서대로 그리고 연속적으로 저장한다.</li>
            </ul>

            <table>
              <thead>
                <tr>
                  <th style="text-align: center">연산</th>
                  <th style="text-align: left">방법</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td style="text-align: center">접근</td>
                  <td style="text-align: left">인덱스 주소를 한 번에 계산해서 메모리에 접근한다.</td>
                </tr>
                <tr>
                  <td style="text-align: center">탐색</td>
                  <td style="text-align: left">가장 앞 인덱스부터 선형적으로 모든 데이터를 확인한다.</td>
                </tr>
                <tr>
                  <td style="text-align: center">삽입</td>
                  <td style="text-align: left">인덱스 뒤 데이터를 한 칸씩 뒤로 밀고, 데이터를 저장한다.</td>
                </tr>
                <tr>
                  <td style="text-align: center">삭제</td>
                  <td style="text-align: left">데이터를 지우고 뒤 인덱스들을 하나씩 앞으로 옮겨서 저장한다.</td>
                </tr>
              </tbody>
            </table>
          </li>
          <li>e.g. 동적 배열, 링크드 리스트 등으로 리스트를 ‘구현’할 수 있다.</li>
          <li>자료 구조는 코드의 성능을 분석하거나 최적화할 때 생각</li>
        </ul>
      </li>
      <li>
        <p>기능만 생각할 수 있어 코드의 흐름에 집중할 수 있다.</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="1-list">1. <code class="language-plaintext highlighter-rouge">list</code></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 파이썬 리스트 생성
</span><span class="n">List</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># 특정 위치에 데이터 삽입
</span><span class="n">List</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">"A"</span><span class="p">)</span>
<span class="n">List</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"B"</span><span class="p">)</span>
<span class="n">List</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"C"</span><span class="p">)</span>
<span class="n">List</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">"D"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">List</span><span class="p">)</span>  <span class="c1"># 리스트 출력
</span>
<span class="c1"># 괄호를 이용한 인덱스 접근
</span><span class="k">print</span><span class="p">(</span><span class="n">List</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">List</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

<span class="n">List</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>

<span class="k">print</span><span class="p">(</span><span class="n">List</span><span class="p">)</span>

<span class="c1"># in 을 이용한 탐색
</span><span class="k">print</span><span class="p">(</span><span class="s">"A"</span> <span class="ow">in</span> <span class="n">List</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"E"</span> <span class="ow">in</span> <span class="n">List</span><span class="p">)</span>

<span class="c1"># del을 이용한 삭제
</span><span class="k">del</span> <span class="n">List</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="n">List</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>
    <p>동적 배열과 더블리 링크드 리스트의 차이</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"> </th>
          <th style="text-align: center">동적 배열</th>
          <th style="text-align: center">더블리 링크드 리스트</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">접근</td>
          <td style="text-align: center">$O(1)$</td>
          <td style="text-align: center">$O(n)$</td>
        </tr>
        <tr>
          <td style="text-align: center">탐색</td>
          <td style="text-align: center">$O(n)$</td>
          <td style="text-align: center">$O(n)$</td>
        </tr>
        <tr>
          <td style="text-align: center">접근+삽입</td>
          <td style="text-align: center">$O(n)$</td>
          <td style="text-align: center">$O(n)$</td>
        </tr>
        <tr>
          <td style="text-align: center">접근+삭제</td>
          <td style="text-align: center">$O(n)$</td>
          <td style="text-align: center">$O(n)$</td>
        </tr>
        <tr>
          <td style="text-align: center"> </td>
          <td style="text-align: center"> </td>
          <td style="text-align: center"> </td>
        </tr>
        <tr>
          <td style="text-align: center">맨 앞 삽입</td>
          <td style="text-align: center">$O(n)$</td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">맨 앞 삭제</td>
          <td style="text-align: center">$O(n)$</td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">맨 뒤 삽입</td>
          <td style="text-align: center">분할 상환 $O(1)$</td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">맨 뒤 삭제</td>
          <td style="text-align: center">분할 상환 $O(1)$</td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center"> </td>
          <td style="text-align: center"> </td>
          <td style="text-align: center"> </td>
        </tr>
        <tr>
          <td style="text-align: center">유리할 때</td>
          <td style="text-align: center">접근 빈번</td>
          <td style="text-align: center">맨 앞 삽입 및 삭제</td>
        </tr>
      </tbody>
    </table>

    <ul>
      <li>파이썬 리스트는 <strong>동적배열</strong></li>
    </ul>
  </li>
</ul>

<h3 id="2-queue">2. <code class="language-plaintext highlighter-rouge">queue</code></h3>

<ul>
  <li>대기열</li>
  <li>데이터간 순서 관계를 유지할 수 있다.</li>
  <li>FIFO(First-In-First-Out)
    <ul>
      <li>맨 뒤 데이터 추가</li>
      <li>맨 앞 데이터 삭제</li>
      <li>맨 앞 데이터 접근</li>
    </ul>
  </li>
  <li>queue는 더블리 링크드 리스트가 유리</li>
  <li>
    <p>파이썬: <code class="language-plaintext highlighter-rouge">deque</code></p>

    <ul>
      <li>Doubly-ended-queue의 약자</li>
      <li>맨 앞과 뒤에 데이터를 삽입하고 삭제할 수 있게 해주는 자료형</li>
      <li><strong>더블리 링크드 리스트</strong></li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># deque는 파이썬 collections 모듈에서 가지고 온다.
</span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>

<span class="c1"># 큐의 맨 끝에 데이터 삽입
</span><span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>
<span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
<span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"C"</span><span class="p">)</span>
<span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"D"</span><span class="p">)</span>
<span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"E"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span>  <span class="c1"># 큐 출력
</span>
<span class="c1"># 큐의 가장 앞 데이터에 접근
</span><span class="k">print</span><span class="p">(</span><span class="n">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="c1"># 큐 맨 앞 데이터 삭제
</span><span class="k">print</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span>  <span class="c1"># 큐 출력
</span>
<span class="c1"># queue에 데이터가 존재하는지 확인
</span><span class="k">if</span> <span class="n">queue</span><span class="p">:</span>
  <span class="p">...</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-stack">3. <code class="language-plaintext highlighter-rouge">stack</code></h3>

<ul>
  <li>데이터간 순서 관계를 유지할 수 있다.</li>
  <li>LIFO: Last-in-first-out
    <ul>
      <li>맨 뒤 데이터 추가</li>
      <li>맨 뒤 데이터 삭제</li>
      <li>맨 뒤 데이터 접근</li>
    </ul>
  </li>
  <li>stack은 <strong>동적 배열</strong>, <strong>더블리 링크드</strong> 리스트 상관없음</li>
  <li>
    <p>파이썬: <code class="language-plaintext highlighter-rouge">deque</code>, <code class="language-plaintext highlighter-rouge">list</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">stack</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span> <span class="c1"># deque
</span><span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>      <span class="c1"># list
</span>
<span class="c1"># 스택 맨 끝에 데이터 추가
</span><span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>
<span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
<span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"C"</span><span class="p">)</span>
<span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"D"</span><span class="p">)</span>
<span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"E"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>  <span class="c1"># 스택 출력
</span>
<span class="c1"># 맨 끝 데이터 접근
</span><span class="k">print</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>

<span class="c1"># 맨 끝 데이터 삭제
</span><span class="k">print</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>  <span class="c1"># 스택 출력
</span></code></pre></div>    </div>
  </li>
</ul>

<details>
<summary> 문제: 괄호 짝 확인하기 </summary>
<div>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="k">def</span> <span class="nf">parentheses_checker</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
  <span class="s">"""주어진 문자열 인풋의 모든 괄호가 짝이 있는지 확인해주는 메소드"""</span>

  <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"테스트하는 문자열: </span><span class="si">{</span><span class="n">string</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
  <span class="n">stack</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span> <span class="c1"># 사용할 스택 정의
</span>
  <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="s">'('</span><span class="p">:</span>
      <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="s">')'</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">stack</span><span class="p">:</span>
        <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"문자열 </span><span class="si">{</span><span class="n">idx</span><span class="si">}</span><span class="s">번째 위치에 있는 닫는 괄호에 맞는 열리는 괄호가 없습니다."</span><span class="p">)</span>

  <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"문자열 </span><span class="si">{</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span><span class="si">}</span><span class="s">번째 위치에 있는 괄호가 닫히지 않았습니다."</span><span class="p">)</span>

<span class="c1"># test case
</span><span class="n">case1</span> <span class="o">=</span> <span class="s">"(1+2)*(3+5)"</span>
<span class="n">case2</span> <span class="o">=</span> <span class="s">"((3*12)/(41-31))"</span>
<span class="n">case3</span> <span class="o">=</span> <span class="s">"((1+4)-(3*12)/3"</span>
<span class="n">case4</span> <span class="o">=</span> <span class="s">"(12-3)*(56/3))"</span>
<span class="n">case5</span> <span class="o">=</span> <span class="s">")1+14)/3"</span>
<span class="n">case6</span> <span class="o">=</span> <span class="s">"(3+15(*3"</span>

<span class="n">parentheses_checker</span><span class="p">(</span><span class="n">case1</span><span class="p">)</span>
<span class="n">parentheses_checker</span><span class="p">(</span><span class="n">case2</span><span class="p">)</span>
<span class="n">parentheses_checker</span><span class="p">(</span><span class="n">case3</span><span class="p">)</span>
<span class="n">parentheses_checker</span><span class="p">(</span><span class="n">case4</span><span class="p">)</span>
<span class="n">parentheses_checker</span><span class="p">(</span><span class="n">case5</span><span class="p">)</span>
<span class="n">parentheses_checker</span><span class="p">(</span><span class="n">case6</span><span class="p">)</span>
</code></pre></div>    </div>

  </div>
</details>

<h3 id="4-dictionary">4. <code class="language-plaintext highlighter-rouge">dictionary</code></h3>

<ul>
  <li>데이터간 순서 관계를 약속하지 않음
    <ul>
      <li>key-value 데이터 쌍 삽입</li>
      <li>key를 이용한 데이터 탐색</li>
      <li>key를 이용한 데이터 삭제</li>
    </ul>
  </li>
  <li><strong>해시 테이블</strong></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Dict</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1"># key-value 데이터 삽입
</span><span class="n">Dict</span><span class="p">[</span><span class="s">"A"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">Dict</span><span class="p">[</span><span class="s">"B"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span>
<span class="n">Dict</span><span class="p">[</span><span class="s">"C"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">30</span>
<span class="n">Dict</span><span class="p">[</span><span class="s">"D"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">40</span>
<span class="n">Dict</span><span class="p">[</span><span class="s">"E"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">50</span>

<span class="k">print</span><span class="p">(</span><span class="n">Dict</span><span class="p">)</span> <span class="c1"># 딕셔너리 출력
</span>
<span class="c1"># 한 key에 여러 value 저장 시도
</span><span class="n">Dict</span><span class="p">[</span><span class="s">"B"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span>

<span class="k">print</span><span class="p">(</span><span class="n">Dict</span><span class="p">)</span> <span class="c1"># 딕셔너리 출력
</span>
<span class="c1"># key를 이용해서 value 탐색
</span><span class="k">print</span><span class="p">(</span><span class="n">Dict</span><span class="p">[</span><span class="s">"E"</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">Dict</span><span class="p">[</span><span class="s">"A"</span><span class="p">])</span>

<span class="c1"># key를 이용한 삭제
</span><span class="n">Dict</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
<span class="n">Dict</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"E"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">Dict</span><span class="p">)</span> <span class="c1"># 딕셔너리 출력
</span></code></pre></div></div>

<h3 id="5-set">5. <code class="language-plaintext highlighter-rouge">set</code></h3>

<ul>
  <li>데이터간 순서 관계를 약속하지 않음
    <ul>
      <li>삽입: 데이터를 저장할 수 있다(중복 데이터 X)</li>
      <li>탐색: 데이터가 저장됐는지 확인할 수 있다.</li>
      <li>삭제: 저장한 데이터를 지울 수 있다.</li>
    </ul>
  </li>
  <li><strong>해시 테이블</strong>: 인덱스에 key만 저장한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

<span class="c1"># 데이터 저장
</span><span class="n">Set</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>
<span class="n">Set</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
<span class="n">Set</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"C"</span><span class="p">)</span>
<span class="n">Set</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"D"</span><span class="p">)</span>
<span class="n">Set</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"E"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">Set</span><span class="p">)</span>  <span class="c1"># 세트 출력
</span>
<span class="c1"># 중복 데이터 저장 시도
</span><span class="n">Set</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>
<span class="n">Set</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">Set</span><span class="p">)</span>  <span class="c1"># 세트 출력
</span>
<span class="c1"># 데이터 탐색
</span><span class="k">print</span><span class="p">(</span><span class="s">"F"</span> <span class="ow">in</span> <span class="n">Set</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"B"</span> <span class="ow">in</span> <span class="n">Set</span><span class="p">)</span>

<span class="c1"># 데이터 삭제
</span><span class="n">Set</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>
<span class="n">Set</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">Set</span><span class="p">)</span>  <span class="c1"># 세트 출력
</span></code></pre></div></div>

<h3 id="파이썬-자료형-주요-시간-복잡도-정리">파이썬 자료형 주요 시간 복잡도 정리</h3>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">list</code>: 동적 배열</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">연산</th>
          <th style="text-align: left">예시</th>
          <th style="text-align: center">시간복잡도</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">접근</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">List[0]</code><br /><code class="language-plaintext highlighter-rouge">List[0] = 5</code></td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">추가</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">List.append(5)</code></td>
          <td style="text-align: center">$O(1)$<br />(분할 상환)</td>
        </tr>
        <tr>
          <td style="text-align: center">맨 뒤 삭제</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">List.pop()</code></td>
          <td style="text-align: center">$O(1)$<br />(분할 상환)</td>
        </tr>
        <tr>
          <td style="text-align: center">길이 확인</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">len(List)</code></td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">삽입</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">List.insert(3, "A")</code></td>
          <td style="text-align: center">$O(n)$</td>
        </tr>
        <tr>
          <td style="text-align: center">삭제</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">del List[0]</code><br /><code class="language-plaintext highlighter-rouge">List.pop(3)</code></td>
          <td style="text-align: center">$O(n)$</td>
        </tr>
        <tr>
          <td style="text-align: center">탐색</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"A" in List</code></td>
          <td style="text-align: center">$O(n)$</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">deque</code>: 더블리 링크드 리스트</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">연산</th>
          <th style="text-align: left">예시</th>
          <th style="text-align: center">시간복잡도</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">맨 앞 삭제</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Deque.popleft()</code></td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">맨 앞 삽입</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Deque.appendleft()</code></td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">맨 뒤 삭제</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Deque.pop()</code></td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">맨 앞 삽입</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Deque.append("A")</code></td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">길이 확인</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">len(Deque)</code></td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">dict</code>: 해시 테이블</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">연산</th>
          <th style="text-align: left">예시</th>
          <th style="text-align: center">시간복잡도</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">탐색</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Dict["A"]</code></td>
          <td style="text-align: center">평균 $O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">삽입</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Dict["A"] = 100</code></td>
          <td style="text-align: center">평균 $O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">삭제</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">del Dict["A"]</code><br /><code class="language-plaintext highlighter-rouge">Dict.pop["A"]</code></td>
          <td style="text-align: center">평균 $O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">길이 확인</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">len(Dict)</code></td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">set</code>: 해시 테이블</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">연산</th>
          <th style="text-align: left">예시</th>
          <th style="text-align: center">시간복잡도</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">탐색</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"A" in Set</code></td>
          <td style="text-align: center">평균 $O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">삽입</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Set.add("A")</code></td>
          <td style="text-align: center">평균 $O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">삭제</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Set.remove("A")</code><br /><code class="language-plaintext highlighter-rouge">Set.pop("A")</code></td>
          <td style="text-align: center">평균 $O(1)$</td>
        </tr>
        <tr>
          <td style="text-align: center">길이 확인</td>
          <td style="text-align: left"><code class="language-plaintext highlighter-rouge">len(Set)</code></td>
          <td style="text-align: center">$O(1)$</td>
        </tr>
      </tbody>
    </table>
  </li>
</ol>

<ul>
  <li><span style="color: red"> 자신이 데이터에 하고 싶은 연산들이 무엇이 있고 얼마나 걸릴지에 대해서 잘 생각한 후, 알맞는 자료 구조를 가진 자료형을 골라야 한다! </span>
    <ul>
      <li>e.g. <code class="language-plaintext highlighter-rouge">list</code>: 탐색 약 13초, <code class="language-plaintext highlighter-rouge">set</code>: 탐색 약 0.00…초</li>
    </ul>
  </li>
</ul>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Computer Science" /><category term="Data Structure" /><summary type="html"><![CDATA[자료 구조란?]]></summary></entry><entry><title type="html">문제 해결 능력 기르기</title><link href="http://localhost:4000/coding/computer%20science/algorithm/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%984/" rel="alternate" type="text/html" title="문제 해결 능력 기르기" /><published>2023-03-16T00:00:00+09:00</published><updated>2023-03-17T00:20:00+09:00</updated><id>http://localhost:4000/coding/computer%20science/algorithm/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%984</id><content type="html" xml:base="http://localhost:4000/coding/computer%20science/algorithm/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%984/"><![CDATA[<h2 id="투자-귀재-규식이-ii">투자 귀재 규식이 II</h2>

<p>규식이는 친구들 사이에서 투자의 귀재로 알려져 있습니다. 페이수북과 인수타그램에 자신의 성과를 과시하기 때문인데요. 사실 규식이가 그 정도의 실력자는 아닙니다. 성과가 좋을 때에만 SNS에 공유해서 그렇게 비춰질 뿐이죠. 계속해서 멋진 모습을 보여주기 위해, 특정 기간 중 수익이 가장 큰 구간을 찾아내는 함수 <strong><code class="language-plaintext highlighter-rouge">sublist_max</code></strong>를 작성해 보려고 합니다. Divide and Conquer 방식으로 이 문제를 한 번 풀어봅시다! 시간 복잡도는 $O(n\lg{n})$이 되어야 합니다.</p>

<p><strong><code class="language-plaintext highlighter-rouge">sublist_max</code></strong> 함수는 3개의 파라미터를 받습니다.</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">profits</code>: 며칠 동안의 수익이 담겨 있는 리스트</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">start</code>: 살펴볼 구간의 시작 인덱스</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">end</code>: 살펴볼 구간의 끝 인덱스</strong></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">sublist_max</code></strong>는 <strong><code class="language-plaintext highlighter-rouge">profits</code></strong>의 <strong><code class="language-plaintext highlighter-rouge">start</code></strong>부터 <strong><code class="language-plaintext highlighter-rouge">end</code></strong>까지 구간에서 가능한 가장 큰 수익을 리턴합니다.</p>

<p>우선 함수 <strong><code class="language-plaintext highlighter-rouge">sublist_max</code></strong>는 파라미터로 리스트 <strong><code class="language-plaintext highlighter-rouge">profits</code></strong>를 받는데요. <strong><code class="language-plaintext highlighter-rouge">profits</code></strong>에는 며칠 동안의 수익이 담겨 있습니다. 예를 들어서 <strong><code class="language-plaintext highlighter-rouge">profits</code></strong>가 <strong><code class="language-plaintext highlighter-rouge">[7, -3, 4, -8]</code></strong>이라면 첫 날에는 7달러를 벌었고, 둘째 날에는 3달러를 잃었고, 셋째 날에는 4달러를 벌었고, 마지막 날에는 8달러를 잃은 거죠. <strong><code class="language-plaintext highlighter-rouge">profits</code></strong>가 <strong><code class="language-plaintext highlighter-rouge">[7, -3, 4, -8]</code></strong>이라면 무엇을 리턴해야 할까요? <strong><code class="language-plaintext highlighter-rouge">profits</code></strong>에서 가장 많은 수익을 낸 구간은 <strong><code class="language-plaintext highlighter-rouge">[7, -3, 4]</code></strong>입니다. 이 구간에서 낸 수익은 8달러이니, <strong><code class="language-plaintext highlighter-rouge">8</code></strong>을 리턴하면 되겠죠! 만약 <strong><code class="language-plaintext highlighter-rouge">profits</code></strong>가 <strong><code class="language-plaintext highlighter-rouge">[-2, -3, 4, -1, -2, 1, 5, -3]</code></strong>이라면? <strong><code class="language-plaintext highlighter-rouge">profits</code></strong>에서 수익이 가장 큰 구간은 <strong><code class="language-plaintext highlighter-rouge">[4, -1, -2, 1, 5]</code></strong>입니다. 이 구간에서 낸 수익은 7달러이니, <strong><code class="language-plaintext highlighter-rouge">7</code></strong>을 리턴하겠죠?</p>

<p>합병 정렬을 구현할 때 <strong><code class="language-plaintext highlighter-rouge">merge_sort</code></strong> 함수를 깔끔하게 작성하기 위해 추가로 <strong><code class="language-plaintext highlighter-rouge">merge</code></strong> 함수를 작성했던 것 기억 나시나요? 마찬가지로 퀵 정렬을 구현할 때 <strong><code class="language-plaintext highlighter-rouge">quicksort</code></strong> 함수에 추가로 <strong><code class="language-plaintext highlighter-rouge">partition</code></strong> 함수를 작성했습니다. 이번에도 <strong><code class="language-plaintext highlighter-rouge">sublist_max</code></strong> 함수에 추가로 새로운 함수를 작성하면 도움이 되실 겁니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
<span class="c1"># 코드를 작성하세요.
</span>
<span class="c1"># 테스트
</span><span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">sublist_max</span><span class="p">(</span><span class="n">list1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>

<span class="n">list2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">sublist_max</span><span class="p">(</span><span class="n">list2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">list2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>

<span class="n">list3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">sublist_max</span><span class="p">(</span><span class="n">list3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">list3</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>

<span class="n">list4</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">sublist_max</span><span class="p">(</span><span class="n">list4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">list4</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<details>
<summary> <b>모범 답안</b> </summary>
<div>

    <ol>
      <li>
        <p>내가 한 풀이 1</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>

    <span class="c1"># base case
</span>    <span class="k">if</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">profits</span><span class="p">[</span><span class="n">start</span><span class="p">]</span>

    <span class="c1"># divide
</span>    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>

    <span class="c1"># conquer
</span>    <span class="n">left_max</span> <span class="o">=</span> <span class="n">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
    <span class="n">right_max</span> <span class="o">=</span> <span class="n">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>

    <span class="n">mid_left_max</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span>
    <span class="n">temp_mid_left_max</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span>
    <span class="n">mid_right_max</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
    <span class="n">temp_mid_right_max</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">start</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">temp_mid_left_max</span> <span class="o">=</span> <span class="n">temp_mid_left_max</span> <span class="o">+</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">mid_left_max</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">temp_mid_left_max</span><span class="p">,</span> <span class="n">mid_left_max</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">temp_mid_right_max</span> <span class="o">=</span> <span class="n">temp_mid_right_max</span> <span class="o">+</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">mid_right_max</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">temp_mid_right_max</span><span class="p">,</span> <span class="n">mid_right_max</span><span class="p">)</span>

    <span class="n">mid_max</span> <span class="o">=</span> <span class="n">mid_left_max</span> <span class="o">+</span> <span class="n">mid_right_max</span>

    <span class="c1"># combine
</span>    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">left_max</span><span class="p">,</span> <span class="n">right_max</span><span class="p">,</span> <span class="n">mid_max</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>내가 한 풀이2</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">max_crossing_sum</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">max1</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span>
    <span class="n">sum1</span> <span class="o">=</span> <span class="n">max1</span>
    <span class="n">max2</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">sum2</span> <span class="o">=</span> <span class="n">max2</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">start</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">max1</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">sum1</span><span class="p">,</span> <span class="n">max1</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">sum2</span> <span class="o">=</span> <span class="n">sum2</span> <span class="o">+</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">max2</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">sum2</span><span class="p">,</span> <span class="n">max2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">max1</span> <span class="o">+</span> <span class="n">max2</span>

<span class="k">def</span> <span class="nf">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="n">left_max</span> <span class="o">=</span> <span class="n">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
        <span class="n">right_max</span> <span class="o">=</span> <span class="n">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">left_max</span><span class="p">,</span> <span class="n">right_max</span><span class="p">,</span> <span class="n">max_crossing_sum</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">profits</span><span class="p">[</span><span class="n">start</span><span class="p">]</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>모범답안</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">max_crossing_sum</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>      <span class="c1"># 중간 인덱스
</span>
    <span class="s">'''
    왼쪽에서의 가장 큰 수익 계산
    인덱스 mid부터 인덱스 0까지 범위를 넓혀가며 최대 수익을 찾는다
    '''</span>
    <span class="n">left_sum</span> <span class="o">=</span> <span class="mi">0</span>                  <span class="c1"># 왼쪽 누적 수익
</span>    <span class="n">left_max</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span>       <span class="c1"># 왼쪽 최고 수익; 왼쪽 반 중 가장 오른쪽 값으로 초기화
</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">start</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">left_sum</span> <span class="o">+=</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">left_max</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">left_max</span><span class="p">,</span> <span class="n">left_sum</span><span class="p">)</span>

    <span class="s">'''
    오른쪽에서의 가장 큰 수익 계산
    인덱스 mid+1부터 인덱스 end까지 범위를 넓혀가며 최대 수익을 찾는다
    '''</span>
    <span class="n">right_sum</span> <span class="o">=</span> <span class="mi">0</span>                 <span class="c1"># 오른쪽 누적 수익
</span>    <span class="n">right_max</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>  <span class="c1"># 오른쪽 최고 수익; 오른쪽 반 중 가장 왼쪽 값으로 초기화
</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">right_sum</span> <span class="o">+=</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">right_max</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">right_max</span><span class="p">,</span> <span class="n">right_sum</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">left_max</span> <span class="o">+</span> <span class="n">right_max</span>


<span class="k">def</span> <span class="nf">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
    <span class="c1"># 범위에 하나의 항목밖에 없으면, 그 항목을 리턴한다
</span>    <span class="k">if</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">profits</span><span class="p">[</span><span class="n">start</span><span class="p">]</span>

    <span class="c1"># 중간 인덱스
</span>    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>

    <span class="c1"># 상황별로 최대 수익을 구한다
</span>    <span class="n">max_left</span> <span class="o">=</span> <span class="n">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
    <span class="n">max_right</span> <span class="o">=</span> <span class="n">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
    <span class="n">max_cross</span> <span class="o">=</span> <span class="n">max_crossing_sum</span><span class="p">(</span><span class="n">profits</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>

    <span class="c1"># 위 세 경우 중 가장 큰 결괏값을 리턴한다
</span>    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_left</span><span class="p">,</span> <span class="n">max_right</span><span class="p">,</span> <span class="n">max_cross</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ol>

  </div>
</details>

<h2 id="투자-귀재-규식이-iii">투자 귀재 규식이 III</h2>

<p>이미 sublist_max 함수를 Divide and Conquer 방식으로 작성했는데요. 이번 과제에서는 시간 복잡도를 $O(n)$로 한 번 더 단축해보세요! 과제 설명은 ‘투자 귀재 규식이 II’를 참고하세요!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">):</span>
<span class="c1"># 코드를 작성하세요.
</span>
<span class="c1"># 테스트
</span><span class="k">print</span><span class="p">(</span><span class="n">sublist_max</span><span class="p">([</span><span class="mi">7</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="n">sublist_max</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
</code></pre></div></div>

<details>
<summary> <b>모범 답안</b> </summary>
<div>

    <ol>
      <li>
        <p>내가 한 풀이 1</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">):</span>
<span class="n">previous_max</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">current_max</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">for</span> <span class="n">profit</span> <span class="ow">in</span> <span class="n">profits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
    <span class="k">if</span> <span class="n">profit</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">current_max</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">current_max</span> <span class="o">=</span> <span class="n">profit</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">current_max</span> <span class="o">+=</span> <span class="n">profit</span>
        <span class="k">if</span> <span class="n">previous_max</span> <span class="o">&lt;</span> <span class="n">current_max</span><span class="p">:</span>
            <span class="n">previous_max</span> <span class="o">=</span> <span class="n">current_max</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">current_max</span> <span class="o">+=</span> <span class="n">profit</span>

<span class="k">return</span> <span class="n">previous_max</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>내가 한 풀이2</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">):</span>
<span class="n">max_profit_so_far</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">max_check</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">profits</span><span class="p">)):</span>
    <span class="n">max_check</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_check</span> <span class="o">+</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="n">max_profit_so_far</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_profit_so_far</span><span class="p">,</span> <span class="n">max_check</span><span class="p">)</span>

<span class="k">return</span> <span class="n">max_profit_so_far</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>모범답안</p>

        <ol>
          <li>
            <p><strong>힌트 1</strong></p>

            <p>아래 리스트를 예시로 생각을 해 봅시다.</p>

            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profits = [7, -3, 4, -8]

</code></pre></div>            </div>

            <p><strong><code class="language-plaintext highlighter-rouge">profits</code></strong>의 최대 수익은 아래 두 가지 중 하나입니다.</p>

            <ol>
              <li><strong>부분 문제 <code class="language-plaintext highlighter-rouge">[7, -3, 4]</code>의 최대 수익 (<code class="language-plaintext highlighter-rouge">sublist_max([7, -3, 4])</code>)</strong></li>
              <li><strong>부분 문제 <code class="language-plaintext highlighter-rouge">[7, -3, 4, -8]</code>에서 <code class="language-plaintext highlighter-rouge">8</code> 을 포함한 구간의 최대 수익</strong></li>
            </ol>

            <p>첫 번째 경우는 당연하죠? 최대 수익 구간에 마지막 요소가 포함되지 않을 때 최대 수익은 부분 문제와 똑같습니다.</p>

            <p>두 번째 경우는 첫 번째와는 반대되는 경우인데요. 마지막 요소 <strong><code class="language-plaintext highlighter-rouge">-8</code></strong>가 포함돼서 최대 수익이 기존 값에서 변하는 경우죠. <strong><code class="language-plaintext highlighter-rouge">-8</code></strong>가 포함되는 구간은 <strong><code class="language-plaintext highlighter-rouge">-8</code></strong>이 포함된 구간들은 총 네 개의 구간이 있습니다.</p>

            <ol>
              <li><strong><code class="language-plaintext highlighter-rouge">[-8]</code></strong></li>
              <li><strong><code class="language-plaintext highlighter-rouge">[4, -8]</code></strong></li>
              <li><strong><code class="language-plaintext highlighter-rouge">[-3, 4, -8]</code></strong></li>
              <li><strong><code class="language-plaintext highlighter-rouge">[7, -3, 4, -8]</code></strong></li>
            </ol>

            <p>이 구간들에서 나올 수 있는 최대 수익이 바로 마지막 요소 <strong><code class="language-plaintext highlighter-rouge">-8</code></strong>가 포함된 경우의 최대 수익이죠.</p>

            <p>첫 번째 경우는:</p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">max_profit_so_far</span> <span class="o">=</span> <span class="n">sublist_max</span><span class="p">([</span><span class="mi">7</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</code></pre></div>            </div>

            <p>두 번째 경우는:</p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">max_check</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">sum</span><span class="p">([</span><span class="o">-</span><span class="mi">8</span><span class="p">]),</span> <span class="nb">sum</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">]),</span> <span class="nb">sum</span><span class="p">([</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">]),</span> <span class="nb">sum</span><span class="p">([</span><span class="mi">7</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">]))</span>
</code></pre></div>            </div>

            <p>이렇게 표현할 수 있겠네요.</p>
          </li>
          <li>
            <p><strong>힌트 2</strong></p>

            <p><strong><code class="language-plaintext highlighter-rouge">sublist_max(profits)</code></strong>는,</p>

            <ol>
              <li><strong><code class="language-plaintext highlighter-rouge">max_profit_so_far = sublist_max([7, -3, 4])</code></strong></li>
              <li><strong><code class="language-plaintext highlighter-rouge">max_check = max(sum([-8]), sum([4, -8]), sum([-3, 4, -8]), sum([7, -3, 4, -8]))</code></strong></li>
            </ol>

            <p>이 두 값 중 더 큰 값이고, 코드로 나타내면,</p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">max_profit_so_far</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_profit_so_far</span><span class="p">,</span> <span class="n">max_check</span><span class="p">)</span>
</code></pre></div>            </div>

            <p>이렇게 표현할 수 있습니다. For 문을 돌면서 각 요소까지의 <strong><code class="language-plaintext highlighter-rouge">max_profit_so_far</code></strong>과 <strong><code class="language-plaintext highlighter-rouge">max_check</code></strong>를 효율적으로 구할 수 있는 방법에 대해서 생각해보세요.</p>
          </li>
          <li>
            <p><strong>힌트 3</strong></p>

            <p>두 정보 다 바로 전 부분 문제에서 받아올 수 있는 정보를 이용해서 효율적으로 알아낼 수 있는데요.</p>

            <p><strong><code class="language-plaintext highlighter-rouge">max_profit_so_far = sublist_max([7, -3, 4])</code></strong> 이 정보는 바로 전 요소까지의 부분 문제의 답을 그대로 쓰면 되겠죠?</p>

            <p><strong><code class="language-plaintext highlighter-rouge">max_check</code></strong>도 마찬가지인데요.</p>

            <p><strong><code class="language-plaintext highlighter-rouge">max_check_1 = max(sum([-8]), sum([4, -8]), sum([-3, 4, -8]), sum([7, -3, 4, -8]))</code></strong>를 하나하나 계산할 필요 없이, 바로 전 부분 문제에서 계산한 <strong><code class="language-plaintext highlighter-rouge">max_check_2 = max(sum([4]), sum([-3, 4]), sum([7, -3, 4]))</code></strong>을 구했을 때의 값 저장해놓았으면,</p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">max_check_1</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_check_2</span> <span class="o">-</span> <span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">)</span>
</code></pre></div>            </div>

            <p>이렇게 구할 수 있겠죠?</p>
          </li>
          <li>
            <p><strong>정답</strong></p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sublist_max</span><span class="p">(</span><span class="n">profits</span><span class="p">):</span>
  <span class="n">max_profit_so_far</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># 반복문에서 현재까지의 부분 문제의 답
</span>  <span class="n">max_check</span> <span class="o">=</span> <span class="n">profits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># 가장 끝 요소를 포함하는 구간의 최대 합
</span>
  <span class="c1"># 반복문을 통하여 각 요소까지의 최대 수익을 저장한다
</span>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">profits</span><span class="p">)):</span>
      <span class="c1"># 새로운 요소를 포함하는 구간의 최대합을 비교를 통해 정한다
</span>      <span class="n">max_check</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_check</span> <span class="o">+</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">profits</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

      <span class="c1"># 최대 구간 합을 비교를 통해 정한다
</span>      <span class="n">max_profit_so_far</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_profit_so_far</span><span class="p">,</span> <span class="n">max_check</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">max_profit_so_far</span>
</code></pre></div>            </div>
          </li>
        </ol>
      </li>
    </ol>

  </div>
</details>

<h2 id="중복되는-항목-찾기-ii">중복되는 항목 찾기 II</h2>

<p>$(N + 1)$의 크기인 리스트에, 1부터 N까지의 임의의 자연수가 요소로 할당되어 있습니다. 그렇다면 어떤 수는 꼭 한 번은 반복되겠지요.</p>

<p>예를 들어 <strong><code class="language-plaintext highlighter-rouge">[1, 3, 4, 2, 5, 4]</code></strong>와 같은 리스트 있을 수도 있고, <strong><code class="language-plaintext highlighter-rouge">[1, 1, 1, 6, 2, 2, 3]</code></strong>과 같은 리스트가 있을 수도 있습니다. (몇 개의 수가 여러 번 중복되어 있을 수도 있습니다.)</p>

<p>이러한 리스트에서 반복되는 요소를 찾아내려고 합니다.</p>

<p>중복되는 어떠한 수 ‘하나’만 찾아내도 됩니다. 즉 <strong><code class="language-plaintext highlighter-rouge">[1, 1, 1, 6, 2, 2, 3]</code></strong>의 예시에서 1, 2를 모두 리턴하지 않고, 1 또는 2 하나만 리턴하게 하면 됩니다.</p>

<p>저번 과제에서는 사전을 정의해서 문제를 푸는 방법을 사용했는데요, 이번 과제에서는 두 가지의 제약이 있습니다.</p>

<ol>
  <li>$**O(n)$ 이상의 공간을 사용할 수 없습니다. 즉 사전이나 리스트와 같이 인풋 리스트의 길이에 비례하는 공간 저장 도구를 사용할 수 없습니다!**</li>
  <li><strong>인풋으로 받는 리스트 <code class="language-plaintext highlighter-rouge">some_list</code>의 요소들을 바꾸거나 변형할 수 없습니다.</strong></li>
</ol>

<p><strong>전에 풀었던 같은 문제를 다른 제약들이 걸려 있는 상황에서 풀어보세요.</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_same_number</span><span class="p">(</span><span class="n">some_list</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
<span class="c1"># 필요한 경우, start와 end를 옵셔널 파라미터로 만들어도 됩니다.
# 코드를 쓰세요
</span>

<span class="c1"># 중복되는 수 ‘하나’만 리턴합니다.
</span><span class="k">print</span><span class="p">(</span><span class="n">find_same_number</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="n">find_same_number</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="n">find_same_number</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">]))</span>
</code></pre></div></div>

<details>
<summary> <b>모범 답안</b> </summary>
<div>

    <ol>
      <li>
        <p>내가 한 풀이 1</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_same_number</span><span class="p">(</span><span class="n">some_list</span><span class="p">):</span>
<span class="n">start</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">end</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">some_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>

<span class="k">while</span><span class="p">(</span><span class="n">start</span> <span class="o">!=</span> <span class="n">end</span><span class="p">):</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">lower</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">upper</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">some_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">num</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">:</span>
            <span class="n">upper</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">start</span> <span class="o">&lt;=</span> <span class="n">num</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">:</span>
            <span class="n">lower</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">if</span> <span class="n">lower</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">end</span> <span class="o">=</span> <span class="n">mid</span>
    <span class="k">elif</span> <span class="n">upper</span> <span class="o">&gt;</span> <span class="n">end</span> <span class="o">-</span> <span class="n">mid</span><span class="p">:</span>
        <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>

<span class="k">return</span> <span class="n">start</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>내가 한 풀이2</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_same_number</span><span class="p">(</span><span class="n">some_list</span><span class="p">,</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
<span class="k">if</span> <span class="n">end</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">some_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>

<span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">start</span>
<span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">some_list</span><span class="p">:</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">):</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">find_same_number</span><span class="p">(</span><span class="n">some_list</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">find_same_number</span><span class="p">(</span><span class="n">some_list</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>모범답안</p>

        <ol>
          <li>
            <p><strong>힌트 1</strong></p>

            <p>이진 탐색 알고리즘 기억나시나요?</p>

            <p>정렬된 리스트에서 특정 값을 찾고 싶을 때 리스트의 탐색 범위를 반씩 줄여나가면서 리스트 안에 값이 있는지 확인하는 알고리즘인데요.</p>

            <p>이진 탐색과 비슷하게 중복되는 요소 탐색 범위를 반씩 줄여나갈 수 있는 방식이 있는지 한 번 고민해보세요.</p>
          </li>
          <li>
            <p><strong>힌트 2</strong></p>

            <p><strong><code class="language-plaintext highlighter-rouge">number_array = [1, 2, 4, 6, 2, 5, 3]</code></strong> 이 리스트를 인풋이라고 생각해봅시다. 길이가 7인 리스트에 1부터 6까지의 자연수들이 들어있는데요. 중복되는 요소가 1부터 3까지의 범위에 있는지 4부터 6까지의 범위에 있는지 알 수 있는 방법을 생각해보세요.</p>
          </li>
          <li>
            <p><strong>힌트 3</strong></p>

            <p>다시 <strong><code class="language-plaintext highlighter-rouge">number_array = [1, 2, 4, 6, 2, 5, 3]</code></strong> 를 살펴봅시다.</p>

            <p>리스트 안에 숫자는 7개고 이 7개의 숫자가 1 ~ 6까지의 자연수일 수 있으니까 범위 1 ~ 3에 있는 숫자가 4개 이상이거나 범위 4 ~ 6에 있는 숫자가 4개 이상일 수밖에는 없겠죠?</p>

            <p>(두 범위가 모두 4보다 작은 것은 말이 안 되죠. 숫자는 7개이고 1 ~ 3인 숫자가 3개 이하고 4 ~ 6인 숫자도 3개 이하면 절대 총 숫자가 7개가 될 수 없기 때문입니다.)</p>

            <p>그럼 1 ~ 3 범위에 속하는 숫자가 4개 이상이라면 1 ~ 3 범위에는 적어도 한 숫자는 다시 반복되는 요소일 수밖에 없겠네요. 숫자는 4개인데 요소가 될 수 있는 자연수는 1, 2, 3 세 개밖에는 없으니까요. 반대로 4 ~ 6 범위에 속하는 숫자가 4개 이상일 때도 동일합니다.</p>

            <p>기존 탐색 범위를 1~6에서 1~3 또는 4~6로 줄일 수 있군요! 범위를 계속 줄이면 결국 답을 찾을 수 있겠죠?</p>
          </li>
          <li>
            <p><strong>힌트 4</strong></p>

            <p>아직 좀 이해하시기 힘드시다면, 실제로 반복되는 숫자를 찾는 예시를 통해 차근차근 알아봅시다.</p>

            <p><strong><code class="language-plaintext highlighter-rouge">number_array = [1, 2, 4, 6, 2, 5, 3]</code></strong> 일 경우를 생각해봅시다.</p>

            <ol>
              <li><strong>1 ~ 3 범위에 있는 자연수의 갯수: 4개, 4 ~ 6 범위에 있는 자연수의 갯수: 3개</strong></li>
            </ol>

            <p>→ 1 ~ 3 범위에 반복되는 자연수가 있을 수밖에 없다.</p>

            <ol>
              <li><strong>1 범위에 있는 자연수의 갯수: 1개, 2 ~ 3 범위에 있는 자연수의 갯수: 3개</strong></li>
            </ol>

            <p>→ 2 ~ 3 범위에 반복되는 자연수가 있을 수밖에 없다</p>

            <ol>
              <li><strong>2 범위에 있는 자연수의 갯수: 2개 → 반복되는 숫자 2을 찾았다 (끝)</strong></li>
            </ol>

            <p>이런 식으로 반복되는 숫자를 찾을 수 있습니다!</p>

            <p><em>위 방식대로 반복되는 숫자를 찾는 코드를 써볼까요?</em></p>
          </li>
          <li>
            <p><strong>정답</strong></p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">find_same_number</span><span class="p">(</span><span class="n">some_list</span><span class="p">,</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">end</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
          <span class="n">end</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">some_list</span><span class="p">)</span>

      <span class="c1"># 반복 요소를 찾으면 리턴한다
</span>      <span class="k">if</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">:</span>
          <span class="k">return</span> <span class="n">start</span>

      <span class="c1"># 중간 지점을 구한다
</span>      <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>

      <span class="c1"># 왼쪽 범위의 숫자를 센다. 오른쪽은 리스트 길이에서 왼쪽 길이를 빼면 되기 때문에 세지 않는다
</span>      <span class="n">left_count</span> <span class="o">=</span> <span class="mi">0</span>

      <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">some_list</span><span class="p">:</span>
          <span class="k">if</span> <span class="n">start</span> <span class="o">&lt;=</span> <span class="n">element</span> <span class="ow">and</span> <span class="n">element</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">:</span>
              <span class="n">left_count</span> <span class="o">+=</span> <span class="mi">1</span>

      <span class="c1"># 왼쪽과 오른쪽 범위중 과반 수 이상의 숫자가 있는 범위 내에서 탐색을 다시한다
</span>      <span class="k">if</span> <span class="n">left_count</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
          <span class="k">return</span> <span class="n">find_same_number</span><span class="p">(</span><span class="n">some_list</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>

      <span class="k">return</span> <span class="n">find_same_number</span><span class="p">(</span><span class="n">some_list</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>

  <span class="k">print</span><span class="p">(</span><span class="n">find_same_number</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]))</span>
  <span class="k">print</span><span class="p">(</span><span class="n">find_same_number</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
  <span class="k">print</span><span class="p">(</span><span class="n">find_same_number</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">]))</span>
</code></pre></div>            </div>
          </li>
        </ol>
      </li>
    </ol>

  </div>
</details>]]></content><author><name>Domiki</name></author><category term="Coding" /><category term="Computer Science" /><category term="Algorithm" /><summary type="html"><![CDATA[투자 귀재 규식이 II]]></summary></entry></feed>